openapi: 3.0.1
info:
  title: TAG Resources
  description: TAG Resources
security:
- basic:
  - gateway-admin
tags:
- name: Audit
  description: The API Gateway stores audit trails for every action on the configuration.
- name: Label
  description: A label to help identification and aggregation of other entities
- name: Account
  description: Manages the user and client Accounts.
- name: Group
  description: Groups are used in the system to aggregate some roles. It makes it
    easier to assign a set of roles to an account and later manage that group without
    having to edit all associated accounts when you need to add or remove a role.
- name: Role
  description: Roles are used to represent a permission a user or a client may have.
    Roles can be aggregated as groups but also be assigned directly to accounts. Roles
    are also used across the system for instance when creating JWT based on the oauth2
    profile definition. Finally as part of routes, they can be enforced so when an
    account if logged in the system will make sure that all listed roles are available
    in the currently logged account.
- name: API Connection
  description: Manages the APIs Configuration.
- name: Database Connection
  description: Manages the Databases Configuration.
- name: LDAP Connection
  description: Manages the LDAPs Configuration.
- name: Keys
  description: Manages the cryptographic keys state.
- name: Bearer Profile
  description: 'The Bearer Authentication allows you to authenticate an HTTP Service
    using security tokens. For more information, please check: https://tribestream.io/guide/en/api-gateway/reference/current/bearer-profile.html'
- name: HTTP Signatures Profile
  description: Manages the user and client Accounts.
- name: OAuth 2.0 Profile
  description: 'The OAuth 2.0 Authentication allows you to generate security tokens
    and use them to authenticate the call to an HTTP Service.For more information,
    please check: https://tribestream.io/guide/en/api-gateway/reference/current/oauth-2-0-profile.html'
- name: Profiles
  description: Manages common operations to all security profiles.
- name: Refresh Tokens
  description: Manages refresh tokens in the system.
- name: Route
  description: Manage all routes in the system.
- name: Route Scenario
  description: Manages all route scenarios of the system. They are used to test the
    routes.
- name: Default
  description: Provides default attribute values for common entities.
- name: Settings
  description: Manages the Settings Configuration.
- name: Account Source
  description: Manages the account sources Configuration.
- name: Claim Source
  description: Manages the ClaimSources Configuration.
- name: LDAP Account Source
  description: Manages the LDAP account sources Configuration.
paths:
  /accounts/generate-keyPair/{size}:
    get:
      tags:
      - Account
      description: Generate a new key pair.
      operationId: generateKeyPair
      parameters:
      - name: size
        in: path
        description: The key size
        required: true
        schema:
          type: integer
          format: int32
        example: 512
      responses:
        404:
          description: If item is not found
  /groups/{name}:
    get:
      tags:
      - Group
      description: Find a group by name
      operationId: find_2
      parameters:
      - name: name
        in: path
        description: The group name
        required: true
        schema:
          type: string
        example: the-ramones
      responses:
        404:
          description: Group name not found
    put:
      tags:
      - Group
      description: Update group data
      operationId: update
      parameters:
      - name: name
        in: path
        description: The group name
        required: true
        schema:
          type: string
        example: the-ramones
      requestBody:
        description: group to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroup'
        required: true
      responses:
        404:
          description: Group name not found
    delete:
      tags:
      - Group
      description: Delete group by name and remove it from accounts
      operationId: delete
      parameters:
      - name: name
        in: path
        description: The group name
        required: true
        schema:
          type: string
        example: the-ramones
      responses:
        404:
          description: Group name not found
  /groups:
    get:
      tags:
      - Group
      description: Search all groups for a given query
      operationId: findAllBySearch_2
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: field
        in: query
        description: List of fields to search against
        schema:
          type: array
          items:
            type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
    post:
      tags:
      - Group
      description: Create new group
      operationId: create
      requestBody:
        description: group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Group
              style: simple
        409:
          description: Group name already exists
  /groups/{group-name}/role/{role-name}:
    put:
      tags:
      - Group
      summary: If given role does not exist, it is created on the fly.
      description: Add the given role to the group.
      operationId: addRole_1
      parameters:
      - name: group-name
        in: path
        description: The group name
        required: true
        schema:
          type: string
        example: the-ramones
      - name: role-name
        in: path
        description: The role name
        required: true
        schema:
          type: string
        example: singer
      responses:
        404:
          description: Group name not found
    delete:
      tags:
      - Group
      description: Remove role from group
      operationId: removeRole
      parameters:
      - name: group-name
        in: path
        description: The group name
        required: true
        schema:
          type: string
        example: the-ramones
      - name: role-name
        in: path
        description: The role name
        required: true
        schema:
          type: string
        example: singer
      responses:
        404:
          description: Group name not found
  /groups/{name}/roles:
    put:
      tags:
      - Group
      description: Add roles collection from group
      operationId: addRoles
      parameters:
      - name: name
        in: path
        description: The group name
        required: true
        schema:
          type: string
        example: the-ramones
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        404:
          description: Group name not found
    delete:
      tags:
      - Group
      description: Remove roles collection from group
      operationId: removeRoles
      parameters:
      - name: name
        in: path
        description: The group name
        required: true
        schema:
          type: string
        example: the-ramones
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        404:
          description: Group name not found
  /groups/bulk/roles:
    put:
      tags:
      - Group
      summary: Will create the roles if they don't exist
      description: Associate groups with roles
      operationId: associateGroupsWithRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRoleGroupAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRoleResult'
    delete:
      tags:
      - Group
      description: Disassociate groups from roles
      operationId: removeGroupsFromRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRoleGroupAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRoleResult'
  /groups/bulk/accounts:
    put:
      tags:
      - Group
      description: Associate groups with accounts
      operationId: addGroupsWithAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkAccountGroupAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkAccountResult'
    delete:
      tags:
      - Group
      description: Disassociate groups from accounts
      operationId: removeGroupsFromAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkAccountGroupAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkAccountResult'
  /groups/{name}/filter:
    get:
      tags:
      - Group
      description: Filter roles and accounts in given group
      operationId: filterInGroup
      parameters:
      - name: name
        in: path
        description: name of the group to find
        required: true
        schema:
          type: string
        example: the-ramones
      - name: query
        in: query
        description: query used to filter the list of accounts and roles for the given
          group
        schema:
          type: string
      - name: labels
        in: query
        description: list of labels to filter the list of accounts and roles for the
          given group
        schema:
          type: array
          items:
            type: string
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        404:
          description: Group name not found
  /roles/{name}:
    get:
      tags:
      - Role
      description: Find a role by its name
      operationId: findById
      parameters:
      - name: name
        in: path
        description: name of the role to find
        required: true
        schema:
          type: string
        example: singer
      responses:
        404:
          description: role name not found
    put:
      tags:
      - Role
      description: Update a role by name and with the provided new role.
      operationId: update
      parameters:
      - name: name
        in: path
        description: name of the role to update
        required: true
        schema:
          type: string
        example: singer
      requestBody:
        description: role to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRole'
        required: true
      responses:
        404:
          description: role name not found
    delete:
      tags:
      - Role
      description: Delete a role by its Name
      operationId: delete
      parameters:
      - name: name
        in: path
        description: name of the role to delete
        required: true
        schema:
          type: string
        example: singer
      responses:
        404:
          description: role name not found
        403:
          description: role 'gateway-admin' can't be deleted
  /roles:
    get:
      tags:
      - Role
      description: Find roles for a given query
      operationId: search
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: field
        in: query
        description: List of fields to search against
        schema:
          type: array
          items:
            type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
    post:
      tags:
      - Role
      description: Create a role.
      operationId: create
      requestBody:
        description: role to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRole'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Role
              style: simple
        409:
          description: role with the same name already exists
  /roles/bulk/names:
    delete:
      tags:
      - Role
      description: Bulk delete roles by names
      operationId: bulkDelete
      requestBody:
        description: set of name to delete
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        403:
          description: role 'gateway-admin' can't be deleted
  /roles/{name}/uses/count:
    get:
      tags:
      - Role
      description: Count how many times a role is referenced in accounts, in groups
        and in routes.
      operationId: countAccountsAndGroups
      parameters:
      - name: name
        in: path
        description: name of the role to count
        required: true
        schema:
          type: string
        example: singer
      responses:
        404:
          description: role name not found
  /roles/bulk/accounts:
    put:
      tags:
      - Role
      description: Associate roles with accounts
      operationId: associateRolesWithAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRoleAccountAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkAccountResult'
    delete:
      tags:
      - Role
      description: Disassociate roles from accounts
      operationId: disassociateRolesFromAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRoleAccountAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRoleResult'
  /roles/bulk/groups:
    put:
      tags:
      - Role
      summary: Will create the groups if they don't exist
      description: Associate roles with groups
      operationId: associateRolesWithGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRoleGroupAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkGroupResult'
    delete:
      tags:
      - Role
      description: Disassociate roles from groups
      operationId: disassociateRolesFromGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRoleGroupAssociate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkGroupResult'
  /connections/api/{id}:
    get:
      tags:
      - API Connection
      description: Find an API by id.
      operationId: find_3
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        404:
          description: Not Found
    put:
      tags:
      - API Connection
      description: Updates an API. For the API Pool changes to be visible at runtime,
        a flush is required.
      operationId: update
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiConnection'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
    delete:
      tags:
      - API Connection
      description: Deletes an API.
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        404:
          description: Not Found
  /connections/api:
    get:
      tags:
      - API Connection
      description: Search all APIs for a given query.
      operationId: findAll_1
      parameters:
      - name: query
        in: query
        description: Filter APIs by searching the name and the description.
        schema:
          type: string
      - name: labels
        in: query
        description: Filter APIs by searching the labels.
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: The paging state token
        schema:
          type: string
      - name: size
        in: query
        description: The size of the result set per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: Refresh the Cassandra Index before search.
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnections'
    post:
      tags:
      - API Connection
      description: Creates an API.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiConnection'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created API
              style: simple
        409:
          description: Conflict
  /connections/api/{id}/flush:
    head:
      tags:
      - API Connection
      description: Force the API connection Pool to reload the configuration and recreate
        its runtime settings.
      operationId: flush
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        204:
          description: Flush succeeded
        404:
          description: Not Found
  /connections/api/bulk/ids:
    delete:
      tags:
      - API Connection
      description: Delete APIConnections by id.
      operationId: bulkDelete_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkApiConnectionResult'
  /connections/api/{id}/hosts:
    post:
      tags:
      - API Connection
      description: Add an Host in the API HostGroup.
      operationId: addHost
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The Host to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created HostGroup
              style: simple
        409:
          description: Conflict
        404:
          description: If item is not found
  /connections/api/{id}/pool:
    put:
      tags:
      - API Connection
      description: Updates the API connection Pool. For the API connection Pool changes
        to be visible at runtime, a flush is required.
      operationId: updatePool
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The Pool configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        404:
          description: If item is not found
  /connections/api/{id}/host-group:
    put:
      tags:
      - API Connection
      description: Updates the API HostGroup configuration for Load Balancing.
      operationId: updateHostGroup
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The API HostGroup configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostGroup'
        required: true
      responses:
        404:
          description: If item is not found
  /connections/api/{id}/strategy:
    put:
      tags:
      - API Connection
      description: Updates the API Strategy configuration for Load Balancing.
      operationId: updateStrategy
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The API Strategy configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Strategy'
        required: true
      responses:
        404:
          description: If item is not found
  /connections/api/{id}/hosts/{hostId}:
    put:
      tags:
      - API Connection
      description: Updates an Host in the API HostGroup.
      operationId: updateHost
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      - name: hostId
        in: path
        description: The id of the Host.
        required: true
        schema:
          type: string
        example: example-com
      requestBody:
        description: The Host to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
    delete:
      tags:
      - API Connection
      description: Deletes a Host in the API HostGroup.
      operationId: deleteHost
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      - name: hostId
        in: path
        description: The id of the Host.
        required: true
        schema:
          type: string
        example: example-com
      responses:
        404:
          description: Not Found
  /connections/api/{id}/hosts/health/tcp:
    delete:
      tags:
      - API Connection
      description: Deletes a TcpHealthCheck in the API HostGroup.
      operationId: deleteTcpHealthCheck
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        404:
          description: Not Found
  /connections/api/{id}/hosts/health/http:
    put:
      tags:
      - API Connection
      description: Updates a HttpHealthCheck in the API HostGroup.
      operationId: updateHttpHealthCheck
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The HttpHealthCheck to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpHealthCheck'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
    post:
      tags:
      - API Connection
      description: Creates a HttpHealthCheck in the API HostGroup.
      operationId: createHttpHealthCheck
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The HttpHealthCheck to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpHealthCheck'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created HostGroup
              style: simple
        409:
          description: Conflict
        404:
          description: If item is not found
    delete:
      tags:
      - API Connection
      description: Deletes a HttpHealthCheck in the API HostGroup.
      operationId: deleteHttpHealthCheck
      parameters:
      - name: id
        in: path
        description: The id of the API.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        404:
          description: Not Found
  /connections/api/ciphers:
    get:
      tags:
      - API Connection
      description: List supported TLS ciphers
      operationId: ciphers
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ciphers'
  /connections/api/protocols:
    get:
      tags:
      - API Connection
      description: List supported protocols
      operationId: protocols
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Protocols'
  /connections/database/{id}:
    get:
      tags:
      - Database Connection
      description: Find a Database by id.
      operationId: find_4
      parameters:
      - name: id
        in: path
        description: The id of the Database.
        required: true
        schema:
          type: string
        example: my-postgresql
      responses:
        404:
          description: Not Found
    put:
      tags:
      - Database Connection
      summary: This will only update the Database configuration, it will not affect
        the runtime settings. If you wish to force a new configuration, you need to
        call flush on the Database instance.
      description: Updates a Database.
      operationId: update
      parameters:
      - name: id
        in: path
        description: The id of the Database.
        required: true
        schema:
          type: string
        example: my-postgresql
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseConnection'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
    delete:
      tags:
      - Database Connection
      description: Deletes a Database.
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The id of the Database.
        required: true
        schema:
          type: string
        example: my-postgresql
      responses:
        404:
          description: Not Found
  /connections/database:
    get:
      tags:
      - Database Connection
      description: Search all Databases for a given query.
      operationId: findAll_2
      parameters:
      - name: query
        in: query
        description: Filter Databases by searching the name and the description.
        schema:
          type: string
      - name: labels
        in: query
        description: Filter Databases by searching the labels.
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: The paging state token
        schema:
          type: string
      - name: size
        in: query
        description: The size of the result set per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: Refresh the Cassandra Index before search.
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseConnections'
    post:
      tags:
      - Database Connection
      description: Creates a Database.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseConnection'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Database
              style: simple
        409:
          description: Conflict
  /connections/database/{id}/flush:
    get:
      tags:
      - Database Connection
      description: Force the Database to reload the configuration and recreate its
        runtime settings.
      operationId: flush_1
      parameters:
      - name: id
        in: path
        description: The id of the Database.
        required: true
        schema:
          type: string
        example: my-postgresql
      responses:
        404:
          description: Not Found
  /connections/database/bulk/ids:
    delete:
      tags:
      - Database Connection
      description: Delete Database Connections by id.
      operationId: bulkDelete_2
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkDatabaseConnectionResult'
  /connections/database/drivers:
    get:
      tags:
      - Database Connection
      description: List supported drivers
      operationId: drivers
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drivers'
  /connections/ldap/{id}:
    get:
      tags:
      - LDAP Connection
      description: Find a LDAP by id.
      operationId: find_5
      parameters:
      - name: id
        in: path
        description: The id of the LDAP.
        required: true
        schema:
          type: string
        example: my-open-ldap
      responses:
        404:
          description: Not Found
    put:
      tags:
      - LDAP Connection
      description: Updates a LDAP. This will only update the LDAP configuration, it
        will not affect the runtime settings. If you wish to force a new configuration,
        you need to call flush on the LDAP instance.
      operationId: update
      parameters:
      - name: id
        in: path
        description: The id of the LDAP.
        required: true
        schema:
          type: string
        example: my-open-ldap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLdapConnection'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
    delete:
      tags:
      - LDAP Connection
      description: Deletes a LDAP.
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The id of the LDAP.
        required: true
        schema:
          type: string
        example: my-open-ldap
      responses:
        404:
          description: Not Found
  /connections/ldap:
    get:
      tags:
      - LDAP Connection
      description: Search all LDAPs for a given query.
      operationId: findAll_3
      parameters:
      - name: query
        in: query
        description: Filter LDAPs by searching the name and the description.
        schema:
          type: string
      - name: labels
        in: query
        description: Filter LDAPs by searching the labels.
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: The paging state token
        schema:
          type: string
      - name: size
        in: query
        description: The size of the result set per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: Refresh the Cassandra Index before search.
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapConnections'
    post:
      tags:
      - LDAP Connection
      description: Creates a LDAP.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLdapConnection'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created LDAP
              style: simple
        409:
          description: Conflict
  /connections/ldap/{id}/flush:
    get:
      tags:
      - LDAP Connection
      description: Force the LDAP to reload the configuration and recreate its runtime
        settings.
      operationId: flush_2
      parameters:
      - name: id
        in: path
        description: The id of the LDAP.
        required: true
        schema:
          type: string
        example: my-open-ldap
      responses:
        404:
          description: Not Found
  /connections/ldap/bulk/ids:
    delete:
      tags:
      - LDAP Connection
      description: Delete LDAP Connections by id.
      operationId: bulkDelete_3
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkLdapConnectionResult'
  /keys/{id}:
    put:
      tags:
      - Keys
      description: Activate/Deactivate a key by id
      operationId: state
      parameters:
      - name: id
        in: path
        description: id of the key
        required: true
        schema:
          type: string
        example: 4e4f2beba406a979
      requestBody:
        description: True to set key as active
        content:
          application/json:
            schema:
              type: boolean
      responses:
        404:
          description: key id not found
    delete:
      tags:
      - Keys
      description: Delete a key by id
      operationId: delete
      parameters:
      - name: id
        in: path
        description: id of the key
        required: true
        schema:
          type: string
        example: 4e4f2beba406a979
      responses:
        404:
          description: key id not found
  /keys/search:
    get:
      tags:
      - Keys
      description: Search for keys
      operationId: findAll_4
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: symmetry-type
        in: query
        description: Types of keys sharing between both ends of the communication
        schema:
          type: array
          items:
            type: string
      - name: field
        in: query
        description: List of fields to search against
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: end-date-from
        in: query
        description: Keys being flagged as expiring after the mentioned date
        schema:
          type: string
      - name: end-date-to
        in: query
        description: Keys being flagged as expiring until the mentioned date
        schema:
          type: string
      - name: algorithm
        in: query
        description: The key algorithm
        schema:
          type: string
      - name: is-active
        in: query
        description: If the key can be used
        schema:
          type: boolean
      - name: source
        in: query
        description: 'Entity type using the key: ACCOUNT, OAUTH2_PROFILE, ...'
        schema:
          type: string
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysPage'
  /keys:
    put:
      tags:
      - Keys
      description: Activate/deactivate a set of keys from multiple accounts/profiles.
      operationId: bulkMutate
      requestBody:
        description: The collection of key ids to be Activated/deactivated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStates'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkKeyResult'
    delete:
      tags:
      - Keys
      description: Remove a set of keys from multiple accounts/profiles.
      operationId: bulkDelete_4
      requestBody:
        description: The collection of key ids to be removed
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkKeyResult'
  /keys/{id}/secret-key:
    get:
      tags:
      - Keys
      description: Find a key by id
      operationId: getSecretKeyWithValue
      parameters:
      - name: id
        in: path
        description: id of the key to get
        required: true
        schema:
          type: string
      responses:
        404:
          description: If item is not found
  /keys/{id}/key-pair:
    get:
      tags:
      - Keys
      description: Find a key by id
      operationId: getKeyPairWithValue
      parameters:
      - name: id
        in: path
        description: id of the key to get
        required: true
        schema:
          type: string
      responses:
        404:
          description: If item is not found
  /keys/generate-keyPair/{size}:
    get:
      tags:
      - Keys
      description: Generate a new key pair.
      operationId: generateKeyPair_1
      parameters:
      - name: size
        in: path
        description: The key size
        required: true
        schema:
          type: integer
          format: int32
        example: 512
      responses:
        404:
          description: If item is not found
  /profiles/bearer/{id}:
    get:
      tags:
      - Bearer Profile
      description: Find a bearer profile by id
      operationId: find_6
      parameters:
      - name: id
        in: path
        description: id of the Bearer profile to find
        required: true
        schema:
          type: string
        example: my-bearer-profile
      responses:
        404:
          description: Bearer profile id not found
    put:
      tags:
      - Bearer Profile
      description: Update a bearer profile by ID with new data.
      operationId: update
      parameters:
      - name: id
        in: path
        description: id of the Bearer profile to update
        required: true
        schema:
          type: string
        example: my-bearer-profile
      requestBody:
        description: The new data for the bearer profile to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBearerProfile'
        required: true
      responses:
        404:
          description: bearer profile id not found
        400:
          description: bearer profile has duplicated keys
    delete:
      tags:
      - Bearer Profile
      description: Delete a bearer profile by its id
      operationId: delete
      parameters:
      - name: id
        in: path
        description: id of the Bearer profile to delete
        required: true
        schema:
          type: string
        example: my-bearer-profile
      responses:
        404:
          description: bearer profile id not found
  /profiles/bearer:
    post:
      tags:
      - Bearer Profile
      description: Create a new bearer profile.
      operationId: create
      requestBody:
        description: The new bearer profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBearerProfile'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Bearer Profile
              style: simple
        409:
          description: bearer profile id already exists
        400:
          description: bearer profile has duplicated keys
  /profiles/bearer/{bearerId}/secretkey/{keyId}:
    post:
      tags:
      - Bearer Profile
      description: Replace secret key on a Bearer Profile
      operationId: createSecretKey
      parameters:
      - name: bearerId
        in: path
        description: id of the Bearer profile to update
        required: true
        schema:
          type: string
        example: my-bearer-profile
      requestBody:
        description: The new secret key for the profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretKey'
      responses:
        404:
          description: Bearer Profile id not found
        409:
          description: If item already exists
  /profiles/bearer/{bearerId}/keypair/{keyId}:
    post:
      tags:
      - Bearer Profile
      description: Replace key pair on a Bearer Profile
      operationId: createKeyPair
      parameters:
      - name: bearerId
        in: path
        description: id of the Bearer profile to update
        required: true
        schema:
          type: string
        example: my-bearer-profile
      requestBody:
        description: The new key pair for the profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePublicPrivateKey'
      responses:
        404:
          description: Bearer Profile id not found
        409:
          description: If item already exists
  /profiles/bearer/{bearerId}/key/{keyId}:
    delete:
      tags:
      - Bearer Profile
      description: Delete key pair on a Bearer Profile
      operationId: deleteKey_1
      parameters:
      - name: bearerId
        in: path
        description: id of the Bearer profile to update
        required: true
        schema:
          type: string
        example: my-bearer-profile
      - name: keyId
        in: path
        description: id of the key to delete
        required: true
        schema:
          type: string
      responses:
        404:
          description: Bearer Profile id not found
  /profiles/bearer/algorithms:
    get:
      tags:
      - Bearer Profile
      description: Returns the available algorithms used in the JWT signing validation
        for bearer profiles.
      operationId: getAlgorithms
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithms'
  /profiles/http-signature/{id}:
    get:
      tags:
      - HTTP Signatures Profile
      description: Find Http Signatures profile by id
      operationId: find_7
      parameters:
      - name: id
        in: path
        description: id of the Http Signatures profile to find
        required: true
        schema:
          type: string
        example: my-http-sign-profile
      responses:
        404:
          description: profile id not found
    post:
      tags:
      - HTTP Signatures Profile
      description: Update an http Signatures profile
      operationId: update
      parameters:
      - name: id
        in: path
        description: id of the Http Signatures profile to update
        required: true
        schema:
          type: string
        example: my-http-sign-profile
      requestBody:
        description: Data to update in the Http Signatures profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHttpSignatureProfile'
      responses:
        404:
          description: profile id not found
        400:
          description: profile name cannot be changed
        409:
          description: If item already exists
    delete:
      tags:
      - HTTP Signatures Profile
      description: Delete an http Signatures profile by id
      operationId: delete
      parameters:
      - name: id
        in: path
        description: id of the Http Signatures profile to delete
        required: true
        schema:
          type: string
        example: my-http-sign-profile
      responses:
        404:
          description: profile id not found
  /profiles/http-signature:
    get:
      tags:
      - HTTP Signatures Profile
      description: Search Http Signatures profiles
      operationId: findAllBySearch_3
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpSignatureProfiles'
    post:
      tags:
      - HTTP Signatures Profile
      description: Create a new http Signatures profile
      operationId: create_2
      requestBody:
        description: Data to create a new Http Signatures profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHttpSignatureProfile'
      responses:
        201:
          headers:
            Location:
              description: The resource to the created HttpSignatureProfile
              style: simple
        409:
          description: profile id already exists
        400:
          description: profile data is invalid
  /profiles/http-signature/debug-headers:
    get:
      tags:
      - HTTP Signatures Profile
      description: Get debug headers commonly used in with http signatures authentication
      operationId: debugHeaders
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebugHeaders'
  /profiles/http-signature/headers:
    get:
      tags:
      - HTTP Signatures Profile
      description: Get headers commonly used in with http signatures authentication
      operationId: headers
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Headers'
  /profiles/http-signature/bulk/ids:
    delete:
      tags:
      - HTTP Signatures Profile
      description: Bulk delete http Signatures profile
      operationId: bulkDelete_4
      requestBody:
        description: ids of the Http Signature profiles to delete
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkHttpSignaturesProfileResult'
  /profiles/http-signature/algorithms:
    get:
      tags:
      - HTTP Signatures Profile
      description: Get available algorithms
      operationId: algorithms
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithms'
  /profiles/oauth2/{id}:
    get:
      tags:
      - OAuth 2.0 Profile
      description: find a OAuth 2.0 Profile by id
      operationId: find_8
      parameters:
      - name: id
        in: path
        description: id of the OAuth 2.0 Profile to find
        required: true
        schema:
          type: string
        example: my-oauth-profile
      responses:
        404:
          description: OAuth 2.0 Profile id not found
    put:
      tags:
      - OAuth 2.0 Profile
      description: update a OAuth 2.0 Profile by id
      operationId: update
      parameters:
      - name: id
        in: path
        description: id of the OAuth 2.0 Profile to update
        required: true
        schema:
          type: string
        example: my-oauth-profile
      requestBody:
        description: The new data for the existing OAuth 2.0 Profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOAuth2Profile'
      responses:
        404:
          description: OAuth 2.0 Profile id not found
    delete:
      tags:
      - OAuth 2.0 Profile
      description: Delete a OAuth 2.0 Profile by id
      operationId: delete
      parameters:
      - name: id
        in: path
        description: id of the OAuth 2.0 Profile to delete
        required: true
        schema:
          type: string
        example: my-oauth-profile
      - name: migrateProfileId
        in: query
        description: id of the OAuth 2.0 Profile to migrate existing client accounts
        schema:
          type: string
      responses:
        404:
          description: OAuth 2.0 Profile id not found
  /profiles/oauth2:
    get:
      tags:
      - OAuth 2.0 Profile
      description: Search all OAuth 2.0 profiles
      operationId: findAll_5
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Profiles'
    post:
      tags:
      - OAuth 2.0 Profile
      description: Create a new OAuth 2.0 Profile
      operationId: create_2
      requestBody:
        description: The new OAuth 2.0 profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOAuth2Profile'
      responses:
        201:
          headers:
            Location:
              description: The resource to the created OAuth2Profile
              style: simple
        409:
          description: OAuth 2.0 Profile id already exists
  /profiles/oauth2/{id}/count/users:
    get:
      tags:
      - OAuth 2.0 Profile
      description: Counts the number of accounts using a OAuth 2.0 profile by id
      operationId: countUsers
      parameters:
      - name: id
        in: path
        description: id of the OAuth 2.0 Profile to find
        required: true
        schema:
          type: string
        example: my-oauth-profile
      responses:
        404:
          description: If item is not found
  /profiles/oauth2/{id}/count/routes:
    get:
      tags:
      - OAuth 2.0 Profile
      description: Counts the number of routes using a OAuth 2.0 profile by id
      operationId: countRoutes
      parameters:
      - name: id
        in: path
        description: id of the OAuth 2.0 Profile to find
        required: true
        schema:
          type: string
        example: my-oauth-profile
      responses:
        404:
          description: If item is not found
  /profiles/oauth2/count/routes:
    get:
      tags:
      - OAuth 2.0 Profile
      description: Counts, by OAuth 2.0 profile id, how many OAuth 2.0 Profiles are
        being used in routes
      operationId: countRoutesBulk
      parameters:
      - name: ids
        in: query
        description: The list of profile ids
        schema:
          type: array
          items:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ProfileUsageCounter'
  /profiles/oauth2/count/users:
    get:
      tags:
      - OAuth 2.0 Profile
      description: Counts, by OAuth 2.0 profile id, how many OAuth 2.0 Profiles are
        being used in client accounts
      operationId: countUsersBulk
      parameters:
      - name: ids
        in: query
        description: The list of profile ids
        schema:
          type: array
          items:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ProfileUsageCounter'
  /profiles/oauth2/{profileId}/secretkey/{keyId}:
    post:
      tags:
      - OAuth 2.0 Profile
      description: Replace secret key on a OAuth 2.0 Profile
      operationId: createSecretKey_1
      parameters:
      - name: profileId
        in: path
        description: id of the OAuth 2.0 Profile to update
        required: true
        schema:
          type: string
        example: my-oauth-profile
      requestBody:
        description: The new secret key for the profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretKey'
      responses:
        404:
          description: OAuth 2.0 Profile id not found
        409:
          description: If item already exists
  /profiles/oauth2/{profileId}/keypair/{keyId}:
    post:
      tags:
      - OAuth 2.0 Profile
      description: Replace key pair on a OAuth 2.0 Profile
      operationId: createKeyPair_1
      parameters:
      - name: profileId
        in: path
        description: id of the OAuth 2.0 Profile to update
        required: true
        schema:
          type: string
        example: my-oauth-profile
      requestBody:
        description: The new key pair for the profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePublicPrivateKey'
      responses:
        404:
          description: OAuth 2.0 Profile id not found
        409:
          description: If item already exists
  /profiles/oauth2/{profileId}/key/{keyId}:
    delete:
      tags:
      - OAuth 2.0 Profile
      description: Delete key pair on a OAuth 2.0 Profile
      operationId: deleteKey_2
      parameters:
      - name: profileId
        in: path
        description: id of the OAuth 2.0 Profile to update
        required: true
        schema:
          type: string
        example: my-oauth-profile
      - name: keyId
        in: path
        description: id of the key to delete
        required: true
        schema:
          type: string
        example: 4e4f2beba406a979
      responses:
        404:
          description: OAuth 2.0 Profile id not found
  /profiles/oauth2/algorithms:
    get:
      tags:
      - OAuth 2.0 Profile
      description: Returns the available algorithms used in the JWT signing validation
        for bearer profiles.
      operationId: getAlgorithm
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /profiles:
    get:
      tags:
      - Profiles
      description: Search all security profiles
      operationId: getProfiles
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: field
        in: query
        schema:
          type: array
          items:
            type: string
      - name: type
        in: query
        description: The profile types that must be filtered
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: groupPerType
        in: query
        description: If we must group profiles according to the profile type
        schema:
          type: boolean
          default: true
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profiles'
    delete:
      tags:
      - Profiles
      description: Bulk delete security profiles
      operationId: bulkDelete_5
      requestBody:
        description: The set of security profiles to delete
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkMigrateOAuth2Profile'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOAuth2ProfileMigrateResult'
  /refresh-tokens:
    get:
      tags:
      - Refresh Tokens
      description: Find refresh tokens for a given query
      operationId: findRefreshTokens
      parameters:
      - name: username
        in: query
        description: username used for issuing the token
        schema:
          type: string
      - name: clientId
        in: query
        description: clientId used for issuing the token
        schema:
          type: string
      - name: grantType
        in: query
        description: grant-type used when issuing the token the first time
        schema:
          type: string
      - name: profile
        in: query
        description: name of the profile used to issue a token
        schema:
          type: string
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokens'
  /refresh-tokens/revoke/{jti}:
    delete:
      tags:
      - Refresh Tokens
      description: Revoke a refresh token based on the provided revoke request
      operationId: revoke
      parameters:
      - name: jti
        in: path
        description: the revoke request
        required: true
        schema:
          type: string
      responses:
        404:
          description: If item is not found
  /refresh-tokens/bulk/revoke:
    delete:
      tags:
      - Refresh Tokens
      description: Bulk revoke refresh tokens based on provided revoke requests
      operationId: revoke_1
      requestBody:
        description: the list of revoke requests
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRefreshTokenResult'
  /routes/{id}:
    get:
      tags:
      - Route
      description: find a route by id
      operationId: find_9
      parameters:
      - name: id
        in: path
        description: id of the route to find
        required: true
        schema:
          type: string
        example: route-66
      responses:
        404:
          description: If item is not found
    put:
      tags:
      - Route
      description: update a given route
      operationId: update
      parameters:
      - name: id
        in: path
        description: id of the route to update
        required: true
        schema:
          type: string
        example: route-66
      - name: index-only
        in: query
        description: specifies whereas the server should update only the index and
          leave the rest of the data as is.
        schema:
          type: boolean
          default: false
      - name: dry-run
        in: query
        description: specifies if all checks should be done but the actual update
          in database missed. This is useful to validate the mod rewrite syntax for
          instance or make sure there is no index collision.
        schema:
          type: boolean
          default: false
      requestBody:
        description: the route to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoute'
      responses:
        404:
          description: If item is not found
    delete:
      tags:
      - Route
      description: delete a route by id
      operationId: delete
      parameters:
      - name: id
        in: path
        description: id of the route to delete
        required: true
        schema:
          type: string
        example: route-66
      responses:
        404:
          description: If item is not found
  /routes:
    get:
      tags:
      - Route
      description: Find routes for a given query
      operationId: findAllBySearch_4
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: field
        in: query
        description: List of fields to search against
        schema:
          type: array
          items:
            type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: profile
        in: query
        description: list of profiles to be used for filtering
        schema:
          type: array
          items:
            type: string
      - name: role
        in: query
        description: list of roles to be used for filtering
        schema:
          type: array
          items:
            type: string
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routes'
    post:
      tags:
      - Route
      description: create a route
      operationId: create_2
      parameters:
      - name: dry-run
        in: query
        description: should the server do all validations but not save the new route.
          This is useful to make sure the mod rewrite syntax is correct for instance.
        schema:
          type: boolean
          default: false
      requestBody:
        description: route to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute'
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Route
              style: simple
        409:
          description: If item already exists
  /routes/bulk/ids:
    delete:
      tags:
      - Route
      description: bulk delete a set of route by id
      operationId: bulkDelete_5
      requestBody:
        description: list of id to delete
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRouteUpdateResult'
  /routes/bulk/index:
    post:
      tags:
      - Route
      description: Bulk update the indexes of a set of routes
      operationId: bulkUpdate
      requestBody:
        description: New indexes for the routes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIndex'
        required: true
      responses:
        409:
          description: If item already exists
  /routes/bulk/items:
    post:
      tags:
      - Route
      description: Bulk update a set of routes
      operationId: bulkUpdate_1
      requestBody:
        description: List of routes to bulk update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRoute'
        required: true
      responses:
        409:
          description: If item already exists
  /routes/scenario/{id}:
    get:
      tags:
      - Route Scenario
      description: find a route scenario per id
      operationId: findById_1
      parameters:
      - name: id
        in: path
        description: id of the route scenario
        required: true
        schema:
          type: string
        example: on-the-road
      responses:
        404:
          description: If item is not found
    put:
      tags:
      - Route Scenario
      description: update a given route scenario
      operationId: update
      parameters:
      - name: id
        in: path
        description: id of the route to update
        required: true
        schema:
          type: string
        example: on-the-road
      requestBody:
        description: route scenario to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteScenario'
        required: true
      responses:
        404:
          description: route scenario id not found
    delete:
      tags:
      - Route Scenario
      description: Delete a route by id.
      operationId: delete
      parameters:
      - name: id
        in: path
        description: id of the route to delete
        required: true
        schema:
          type: string
        example: on-the-road
      responses:
        404:
          description: route scenario id not found
  /routes/scenario:
    get:
      tags:
      - Route Scenario
      description: find route scenarios for a given query.
      operationId: findAllBySearch_5
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteScenarios'
    post:
      tags:
      - Route Scenario
      description: create a route scenario
      operationId: create_2
      requestBody:
        description: route scenario to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteScenario'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Route Scenario
              style: simple
        409:
          description: a route scenario already exists with the same name.
  /defaults/connections/api:
    get:
      tags:
      - Default
      description: Get the default attribute values for an API Connection
      operationId: apiConnectionDefault
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
  /defaults/connections/database:
    get:
      tags:
      - Default
      description: Get the default attribute values for a Database Connection
      operationId: databaseConnectionDefault
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseConnection'
  /defaults/connections/ldap:
    get:
      tags:
      - Default
      description: Get the default attribute values for an LDAP Connection
      operationId: ldapConnectionDefault
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapConnection'
  /defaults/claims/sources/api:
    get:
      tags:
      - Default
      description: Get the default attribute values for a API Claim Source
      operationId: apiClaimSourceDefault
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiClaimSource'
  /defaults/claims/sources/database:
    get:
      tags:
      - Default
      description: Get the default attribute values for a database Claim Source
      operationId: databaseClaimSourceDefault
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDatabaseClaimSource'
  /defaults/claims/sources/ldap:
    get:
      tags:
      - Default
      description: Get the default attribute values for a LDAP Claim Source
      operationId: ldapClaimSourceDefault
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLdapClaimSource'
  /defaults/accounts/sources:
    get:
      tags:
      - Default
      description: Get the default attribute values for an Account Source
      operationId: accountSourceDefault
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapAccountSource'
  /defaults/profiles/oauth2:
    get:
      tags:
      - Default
      description: Get the default attribute values for the OAuth 2.0 profiles
      operationId: oAuth2ProfileDefaults
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Profile'
  /defaults/profiles/signature:
    get:
      tags:
      - Default
      description: Get default attributes for the Http Signatures profile
      operationId: httpSignatureProfileDefaults
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpSignatureProfile'
  /defaults/profiles/bearer:
    get:
      tags:
      - Default
      description: Get the default attribute values for the bearer profiles
      operationId: bearerProfileDefaults
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BearerProfile'
  /defaults/routes/mod-rewrite:
    get:
      tags:
      - Default
      description: Return a empty Route populated with defaults.
      operationId: newRouteDefaults
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
  /defaults/algorithms/type:
    get:
      tags:
      - Default
      description: Get the available algorithms
      operationId: algorithmsTypes
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeystoreAlgorithms'
  /defaults/algorithms/rsa/keysizes:
    get:
      tags:
      - Default
      description: The allowed sizes for RSA keys
      operationId: rsaKeySizes
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  /defaults/connections/api/http-health-check:
    get:
      tags:
      - Default
      description: Get the defaults for the http health checks
      operationId: getHTTPHealthCheckDefaults
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpHealthCheck'
  /defaults/settings:
    get:
      tags:
      - Default
      description: Get the default values of available settings
      operationId: getDefaultSettings
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
  /defaults/algorithms:
    get:
      tags:
      - Default
      description: Get the available keystore algorithms
      operationId: algorithms_1
      parameters:
      - name: provider
        in: query
        description: Provider type
        schema:
          type: string
      - name: type
        in: query
        description: Algorithm generator type
        schema:
          type: string
          enum:
          - KEY_GENERATOR
          - KEY_PAIR_GENERATOR
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithms'
  /settings/{id}:
    get:
      tags:
      - Settings
      description: Find a Setting by id.
      operationId: find_10
      parameters:
      - name: id
        in: path
        description: The id of the Setting.
        required: true
        schema:
          type: string
        example: com.tomitribe.tribestream.container.service.Policies.keyValidity
      - name: format
        in: query
        description: The format of the Setting.
        schema:
          type: string
          enum:
          - TEXT
          - CIPHER
          - DURATION
      responses:
        404:
          description: Not Found
    put:
      tags:
      - Settings
      description: Updates a Setting.
      operationId: update
      parameters:
      - name: id
        in: path
        description: The id of the Setting.
        required: true
        schema:
          type: string
        example: com.tomitribe.tribestream.container.service.Policies.keyValidity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
    delete:
      tags:
      - Settings
      description: Deletes a Setting.
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The id of the Setting.
        required: true
        schema:
          type: string
        example: com.tomitribe.tribestream.container.service.Policies.keyValidity
      responses:
        404:
          description: Not Found
  /settings:
    get:
      tags:
      - Settings
      description: Search all Settings for a given query.
      operationId: findAllBySearch_6
      parameters:
      - name: query
        in: query
        description: Filter Settings by searching the key and the value.
        schema:
          type: string
      - name: pagingState
        in: query
        description: The paging state token
        schema:
          type: string
      - name: size
        in: query
        description: The size of the result set per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: Refresh the Cassandra Index before search.
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
    post:
      tags:
      - Settings
      description: Creates a Setting.
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Setting
              style: simple
        409:
          description: Conflict
  /settings/bulk/ids:
    delete:
      tags:
      - Settings
      description: Delete settings by name.
      operationId: bulkDelete_6
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkSettingsResult'
  /settings/bulk/items:
    put:
      tags:
      - Settings
      description: Update all specified settings.
      operationId: bulkUpdate_2
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Setting'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkSettingsResult'
    post:
      tags:
      - Settings
      description: Create settings.
      operationId: bulkCreate
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Setting'
      responses:
        409:
          description: If item already exists
  /accounts/sources/search:
    get:
      tags:
      - Account Source
      description: Find routes for a given query
      operationId: findAllBySearch_7
      parameters:
      - name: query
        in: query
        description: Lucene based query string
        schema:
          type: string
      - name: field
        in: query
        description: List of fields to search against
        schema:
          type: array
          items:
            type: string
      - name: label
        in: query
        description: list of labels to filter results
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: the paging state needs to be passed in for pagination
        schema:
          type: string
      - name: size
        in: query
        description: size of the page
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: Should the indexes be refreshed before performing the search
          request. Default is false because the indexes are updated by an async task
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSources'
  /accounts/sources/bulk/ids:
    put:
      tags:
      - Account Source
      description: Bulk update a set of account sources by id
      operationId: bulkUpdate_2
      requestBody:
        description: list of indexes to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIndex'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkAccountSourceResult'
    delete:
      tags:
      - Account Source
      description: Bulk delete a set of account sources by id
      operationId: bulkDelete_7
      requestBody:
        description: list of ids to delete
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkAccountSourceResult'
  /sources/claims/{id}:
    get:
      tags:
      - Claim Source
      description: Find a ClaimSourceSummary by id.
      operationId: find_11
      parameters:
      - name: id
        in: path
        description: The id of the ClaimSourceSummary.
        required: true
        schema:
          type: string
      responses:
        404:
          description: Not Found
    delete:
      tags:
      - Claim Source
      description: Deletes a ClaimSource whatever type it is.
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The id of the ClaimSource.
        required: true
        schema:
          type: string
      responses:
        404:
          description: Not Found
  /sources/claims:
    get:
      tags:
      - Claim Source
      description: Search all ClaimSources for a given query.
      operationId: findAll_6
      parameters:
      - name: query
        in: query
        description: Filter ClaimSources by searching the name and the description
          or properties of ClaimSources sent in the queryParam fields
        schema:
          type: string
      - name: types
        in: query
        description: Filter ClaimSources by searching the type.
        schema:
          type: array
          items:
            type: string
            enum:
            - LDAP
            - DATABASE
            - API
            - ACCOUNT
      - name: labels
        in: query
        description: Filter Databases by searching the labels.
        schema:
          type: array
          items:
            type: string
      - name: pagingState
        in: query
        description: The paging state token
        schema:
          type: string
      - name: size
        in: query
        description: The size of the result set per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: refresh
        in: query
        description: Refresh the Cassandra Index before search.
        schema:
          type: boolean
          default: false
      - name: fullEntity
        in: query
        description: True if all attributes must not be returned.
        schema:
          type: boolean
          default: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimSources'
  /sources/claims/bulk/ids:
    delete:
      tags:
      - Claim Source
      description: Delete Claim Sources by id.
      operationId: bulkDelete_7
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkClaimSourceResult'
  /sources/claims/api:
    post:
      tags:
      - Claim Source
      description: Creates an API ClaimSource.
      operationId: createApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiClaimSource'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created API ClaimSource
              style: simple
        409:
          description: Conflict
  /sources/claims/database:
    post:
      tags:
      - Claim Source
      description: Creates an database ClaimSource.
      operationId: createDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseClaimSource'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Database ClaimSource
              style: simple
        409:
          description: Conflict
  /sources/claims/ldap:
    post:
      tags:
      - Claim Source
      description: Creates an LDAP ClaimSource.
      operationId: createLdap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLdapClaimSource'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created LDAP ClaimSource
              style: simple
        409:
          description: Conflict
  /sources/claims/api/{id}:
    put:
      tags:
      - Claim Source
      description: Updates an API ClaimSource.
      operationId: updateApi
      parameters:
      - name: id
        in: path
        description: The id of the API ClaimSource.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiClaimSource'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
  /sources/claims/database/{id}:
    put:
      tags:
      - Claim Source
      description: Updates a database ClaimSource.
      operationId: updateDatabase
      parameters:
      - name: id
        in: path
        description: The id of the database ClaimSource.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseClaimSource'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
  /sources/claims/ldap/{id}:
    put:
      tags:
      - Claim Source
      description: Updates an LDAP ClaimSource.
      operationId: updateLdap
      parameters:
      - name: id
        in: path
        description: The id of the LDAP ClaimSource.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLdapClaimSource'
        required: true
      responses:
        400:
          description: Bad Request
        404:
          description: If item is not found
  /accounts/source/ldap:
    post:
      tags:
      - LDAP Account Source
      description: Create an LDAP account source
      operationId: createLdapSource
      requestBody:
        description: The account source to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLDAPAccountSource'
        required: true
      responses:
        201:
          headers:
            Location:
              description: The resource to the created Account Source
              style: simple
        409:
          description: Account source id already exists
  /accounts/source/ldap/{id}:
    get:
      tags:
      - LDAP Account Source
      description: Find a account source by id
      operationId: findById_2
      parameters:
      - name: id
        in: path
        description: id of the account source to delete
        required: true
        schema:
          type: string
        example: fancy-phone-book
      responses:
        404:
          description: If item is not found
    put:
      tags:
      - LDAP Account Source
      description: Update a given account source
      operationId: updateLdapSource
      parameters:
      - name: id
        in: path
        description: id of the account source to update
        required: true
        schema:
          type: string
      requestBody:
        description: The account source to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLdapAccountSource'
        required: true
      responses:
        404:
          description: If item is not found
    delete:
      tags:
      - LDAP Account Source
      description: Delete a account source by id
      operationId: deleteLdapSource
      parameters:
      - name: id
        in: path
        description: id of the ldap account source to delete
        required: true
        schema:
          type: string
        example: fancy-phone-book
      responses:
        404:
          description: If item is not found
components:
  schemas:
    Account:
      required:
      - username
      type: object
      properties:
        fullname:
          type: string
          description: The complete name of the account.
        description:
          type: string
          description: The markdown description for the account.
        email:
          type: string
          description: The email associated to the account.
        groups:
          type: array
          description: The groups associated with the account.
          items:
            type: string
            description: The groups associated with the account.
        roles:
          type: array
          description: The roles associated with the account. These are stored in
            the TAG
          items:
            type: string
            description: The roles associated with the account. These are stored in
              the TAG
        labels:
          type: array
          description: The labels associated with the account.
          items:
            type: string
            description: The labels associated with the account.
        username:
          type: string
          description: The username identifying the account upon creation.
        createdDate:
          type: string
          description: The date set by the server at the momment the account was created.
          format: date-time
        credentials:
          $ref: '#/components/schemas/Credentials'
        accountSource:
          type: string
          description: The place were the account is stored.
        externalRoles:
          type: array
          description: The roles associated with the account. These are stored in
            the place where the account is stored
          items:
            type: string
            description: The roles associated with the account. These are stored in
              the place where the account is stored
      description: The account represents a user or a client application in the TAG.
        Read-only object reruned on search
    KeysPage:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/Key'
        filters:
          $ref: '#/components/schemas/KeysFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of keys available for a given search request with associated
        metadata.
    DatabaseClaimSource:
      required:
      - id
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        name:
          type: string
          description: The name of the claim source
          readOnly: true
          example: My database Claim Source
        databaseConfig:
          $ref: '#/components/schemas/DbConfig'
        id:
          type: string
          description: The unique identifier for the claim source. It is assigned
            by the server side upon creation. The ID is used to find, delete or update
            the claim source.
          readOnly: true
          example: my-database-claim-source
      description: Database Claim Source configuration
    Protocols:
      required:
      - protocols
      type: object
      properties:
        protocols:
          type: array
          description: The list of Protocols.
          items:
            type: string
            description: The list of Protocols.
      description: A model to represent a list of Protocols.
    RefreshTokens:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RefreshToken'
        labels:
          type: array
          items:
            type: string
        pagingState:
          type: string
        total:
          type: integer
          format: int64
    LdapAccountSource:
      required:
      - connection
      - id
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the account source.
          example: A description for the account source
        index:
          type: integer
          description: The priority assigned to the account source. Values must be
            greater than 1. 0 is reserved to gateway accounts.
          format: int32
          example: 1
        labels:
          type: array
          description: The labels associated with the account.
          example: account-from-ldap,source
          items:
            type: string
            description: The labels associated with the account.
        id:
          type: string
          description: The unique identifier for the account source. It is assigned
            by the server side upon creation. The ID is used to find, delete or update
            the account source.
          readOnly: true
          example: fancy-phone-book
        name:
          type: string
          description: The name of the account source
          example: Fancy Phone Book
        connection:
          type: string
          description: The connection id used to connect.
          example: phone-line
        ldapSource:
          $ref: '#/components/schemas/LdapSource'
      description: This is read-only object received in queries. The account source
        represents a where the original account data is stored.
    UpdatePassword:
      required:
      - newPassword
      - oldPassword
      - username
      type: object
      properties:
        username:
          type: string
          description: Account's username.
        oldPassword:
          type: string
          description: Old password.
        newPassword:
          type: string
          description: New password.
      description: Update account password for account type USER
    DigestHeader:
      type: object
      properties:
        name:
          type: string
          description: The HTTP header name for the message digest.
        algorithms:
          type: array
          description: Valid hashing algorithms
          items:
            type: string
            description: Valid hashing algorithms
        failOnInvalid:
          type: boolean
          description: 'The request will fail if the digest header fails the validation.
            Failure can happen in the payloads has been temprerd with while in transit.   '
      description: Definition for the header containing a hash calculated to identify
        the payload.
    LdapQuery:
      required:
      - attributeName
      - baseDn
      - filter
      type: object
      properties:
        baseDn:
          type: string
          description: Point from where an ldap server will search
          example: o=supertribe
        filter:
          type: string
          description: The ldap filter used to identify the objects to retrieve
          example: (member={dn})
        subtreeSearch:
          type: boolean
          description: If all of its subordinates to any depth, should be considered
            in the search
          example: true
        attributeName:
          type: string
          description: The ldap attribute were we will be extracting the data
          example: cn
      description: Ldap query definition
    CreateRouteScenario:
      required:
      - method
      - name
      type: object
      properties:
        method:
          type: string
          description: HTTP Method to simulate the call to the proxy.
          enum:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - HEAD
        resourceUrl:
          type: string
        parameters:
          type: array
          description: parameters to build the HTTP request for test. It can be an
            HTTP header, or a form parameter orany supported types.
          items:
            $ref: '#/components/schemas/Parameter'
        payload:
          type: string
          description: message payload to be sent. This is required when using a POST
            or PUT for instance.
        name:
          type: string
          description: name of the route scenario.
        credentials:
          $ref: '#/components/schemas/CreateSignedCredentials'
      description: Used only to create a route scenario.
    BulkAccountGroupAssociate:
      type: object
      properties:
        accounts:
          type: array
          items:
            type: string
        groups:
          type: array
          items:
            type: string
      description: TODO
    UpdateBasicAuth:
      required:
      - password
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
      description: Basic Authorization
    SecretKeyValue:
      required:
      - value
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
        id:
          type: string
        spec:
          type: string
        type:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        value:
          type: string
          description: The value of the secret key
      description: Used in the creation of symmetric keys
    HttpSignatureProfile:
      required:
      - id
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the http signature profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        signature:
          $ref: '#/components/schemas/Signature'
        debugHeaders:
          type: array
          description: The headers that can be activated to debug issues with the
            http signatures authentication
          items:
            type: string
            description: The headers that can be activated to debug issues with the
              http signatures authentication
        labels:
          type: array
          description: List of associated labels for the http signature profile.
          items:
            type: string
            description: List of associated labels for the http signature profile.
        id:
          type: string
          description: The unique identifier. It is assigned by the server side upon
            creation. The ID is used to find, delete or update the HttpSignatureProfile.
        name:
          type: string
          description: The name of the http signatures profile set upon creation.
      description: 'Read-only object representing an Http Signature Profile. The Http
        Signature Profile provides strong authentication and validation that a message
        has not been tampered with during transport. For details see: https://tribestream.io/guide/en/api-gateway/reference/current/http-signature-profile.html'
    UpdateLdapClaimSource:
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        ldapConfig:
          $ref: '#/components/schemas/LdapConfig'
      description: Used to update an LDAP Claim Source
    Profiles:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/Profile'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of accounts available for a given search request with
        associated metadata.
    DbConfig:
      required:
      - query
      type: object
      properties:
        query:
          type: string
          description: The SQL query to perform in order to get the query
          example: SELECT * from claims where user = {username}
      description: Object holding all database configuration for database claim sources
    ApiConnection:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The description of the API.
        headers:
          type: array
          description: A collection of headers to add / set or modify when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/Header'
        pool:
          $ref: '#/components/schemas/Pool'
        hostGroup:
          $ref: '#/components/schemas/HostGroup'
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
        id:
          type: string
          description: The internal id of the API.
          readOnly: true
        name:
          type: string
          description: The name of the API.
        credentials:
          $ref: '#/components/schemas/Credentials'
      description: A model to represent an API Configuration.
    Pool:
      type: object
      properties:
        connectTimeout:
          type: string
          description: The maximum time a connection can wait when connecting to a
            remote host.
          example: "2"
        requestTimeout:
          type: string
          description: The maximum time a connection waits until the response is completed.
          example: "2"
        readTimeout:
          type: string
          description: The maximum time in millisecond a connection can stay idle.
          example: "2"
        maxConnections:
          type: integer
          description: The maximum number of connections a pool can handle.
          format: int32
        acceptAnyCertificate:
          type: boolean
          description: Accept any certificate from the remote host.
        enabledProtocols:
          type: array
          description: A collection of the enabled protocols.
          items:
            type: string
            description: A collection of the enabled protocols.
        enabledCipherSuites:
          type: array
          description: A collection of the enabled ciphers.
          items:
            type: string
            description: A collection of the enabled ciphers.
      description: A model to represent a Pool Configuration.
    DateHeader:
      type: object
      properties:
        name:
          type: string
          description: The HTTP header name for the date.
        failOnMissing:
          type: boolean
          description: Is the date Header mandatory?
        failureResponseStatus:
          type: integer
          description: HTTP response code to return if the header date is invalid
          format: int32
        failureResponseMessage:
          type: string
          description: Message to return if the header date is invalid
      description: Definition for the header containing a date for the message to
        avoid replay.
    PublicPrivateKey:
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
        id:
          type: string
        publicValue:
          type: string
        algorithm:
          type: string
        type:
          type: string
        bits:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
      description: Asymmetric cryptographic keys used to validate JWTs used in this
        profile. Depends on the authorized algorithms
    BulkLdapConnectionResult:
      type: object
      properties:
        ldapConnections:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    CreateLDAPAccountSource:
      required:
      - connection
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the account source.
          example: A description for the account source
        index:
          type: integer
          description: The priority assigned to the account source. Values must be
            greater than 1. 0 is reserved to gateway accounts.
          format: int32
          example: 1
        labels:
          type: array
          description: The labels associated with the account.
          example: account-from-ldap,source
          items:
            type: string
            description: The labels associated with the account.
        name:
          type: string
          description: The name of the account source
          example: Fancy Phone Book
        connection:
          type: string
          description: The connection id used to connect.
          example: phone-line
        ldapSource:
          $ref: '#/components/schemas/LdapSource'
      description: This is used to create new account sources. The account source
        represents a where the original account data is stored.
    Failure:
      required:
      - code
      - message
      - name
      type: object
      properties:
        name:
          type: string
          description: name of the entity that failed to be updated.
        message:
          type: string
          description: message for the failure.
        code:
          type: string
          description: code for the failure.
          enum:
          - INVALID_ROLE_NAME
          - INVALID_GROUP_NAME
          - INVALID_LABEL_NAME
          - INVALID_ACCOUNT_NAME
          - MISSING_ACCOUNT
      description: Failure details
    Settings:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/Setting'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of TAG Settingss available for a given search request
        with associated metadata.
    AuditEntryFilter:
      required:
      - labels
      type: object
      properties:
        labels:
          type: array
          description: The set of unique labels in all returned items. It is used
            to create the labels cloud and ease following filtering.
          items:
            type: string
            description: The set of unique labels in all returned items. It is used
              to create the labels cloud and ease following filtering.
        types:
          type: array
          description: All types of entries so it's possible to drill down and eventually
            find the entry..
          items:
            type: string
            description: All types of entries so it's possible to drill down and eventually
              find the entry..
        accounts:
          type: array
          description: All accounts of entries so it's possible to drill down and
            eventually find the entry..
          items:
            type: string
            description: All accounts of entries so it's possible to drill down and
              eventually find the entry..
      description: A generic filter, part of the page result used for any search request.
        Contains the elements that can be used for filtering
    DefaultFilter:
      required:
      - labels
      type: object
      properties:
        labels:
          type: array
          description: The set of unique labels in all returned items. It is used
            to create the labels cloud and ease following filtering.
          items:
            type: string
            description: The set of unique labels in all returned items. It is used
              to create the labels cloud and ease following filtering.
      description: A generic filter, part of the page result used for any search request.
        Contains the elements that can be used for filtering
    BulkDatabaseConnectionResult:
      type: object
      properties:
        databaseConnections:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    CreateAccount:
      required:
      - username
      type: object
      properties:
        fullname:
          type: string
          description: The complete name of the account.
        description:
          type: string
          description: The markdown description for the account.
        email:
          type: string
          description: The email associated to the account.
        groups:
          type: array
          description: The groups associated with the account.
          items:
            type: string
            description: The groups associated with the account.
        roles:
          type: array
          description: The roles associated with the account. These are stored in
            the TAG
          items:
            type: string
            description: The roles associated with the account. These are stored in
              the TAG
        labels:
          type: array
          description: The labels associated with the account.
          items:
            type: string
            description: The labels associated with the account.
        username:
          type: string
          description: The username identifying the account upon creation.
      description: The account represents a user or a client application in the TAG.
        Read-only object returned on search
    Labels:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/Label'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of labels available for a given search request with associated
        metadata.
    Roles:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/Role'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of roles available for a given search request with associated
        metadata.
    Routes:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/Route'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of routes available for a given search request with associated
        metadata.
    ApiConfig:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: The endpoint to perform an HTTP GET to retrieve the data. The
            path we need to add to the connection address
          example: /api/claims
      description: Object holding all API configuration for API claim sources
    ExternalAccount:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: The username identifying the account upon creation.
        description:
          type: string
          description: The markdown description for the account.
        groups:
          type: array
          description: The groups associated with the account.
          items:
            type: string
            description: The groups associated with the account.
        roles:
          type: array
          description: The roles associated with the account. These are stored in
            the TAG
          items:
            type: string
            description: The roles associated with the account. These are stored in
              the TAG
        labels:
          type: array
          description: The labels associated with the account.
          items:
            type: string
            description: The labels associated with the account.
      description: The account represents a user or a clinet application in the TAG.
        Read-only object returned on search
    CreateSignedBasicAuth:
      required:
      - password
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the Basic authorization configuration when
        used with HTTP Signatures.
    OAuth2ProfileUsageCounter:
      type: object
      properties:
        accounts:
          type: integer
          format: int64
        routes:
          type: integer
          format: int64
    SecretKey:
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
        id:
          type: string
        spec:
          type: string
        type:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
      description: Symmetric cryptographic keys used to validate JWTs used in this
        profile. Depends on the authorized algorithms
    UpdateHttpSignatureProfile:
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the http signature profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        signature:
          $ref: '#/components/schemas/Signature'
        debugHeaders:
          type: array
          description: The headers that can be activated to debug issues with the
            http signatures authentication
          items:
            type: string
            description: The headers that can be activated to debug issues with the
              http signatures authentication
        labels:
          type: array
          description: List of associated labels for the http signature profile.
          items:
            type: string
            description: List of associated labels for the http signature profile.
      description: 'Used to creation and update HTTP signature profiles. For details
        about HTTP signature profiles, please check: https://tribestream.io/guide/en/api-gateway/reference/current/http-signature-profile.html'
    Header:
      required:
      - action
      - name
      - provider
      type: object
      properties:
        name:
          type: string
          description: HTTP header name to add or change.
          example: lb-header
        value:
          type: string
          description: value of the HTTP Header. Depending on the provider, the value
            is required or not.
          example: load-balancer-1
        provider:
          type: string
          description: Provider to be used with the specified value. The providers
            are extensions allowing various manipulations like computing a Digest
            on the fly, or extracting a JWT claim and add it as a header.
          example: DEFAULT
          enum:
          - DEFAULT
          - DIGEST
          - DATE
          - OGNL
          - ENV
        action:
          type: string
          description: action for this header. This basically allows to add, remove
            or append to a header.
          example: SET
          enum:
          - SET
          - UNSET
          - ADD
      description: Header definition when header manipulation is used. For instance
        it can be used when defining an API Connection but it can also be used as
        part of a Route to dynamically add or remove headers.
    AuditEntry:
      type: object
      properties:
        username:
          type: string
          description: username of the account that did the action
        action:
          type: string
          description: Action performed. Can be insert, update or delete.
        title:
          type: string
          description: Short title for the audit entry.
        message:
          type: string
          description: Detailed message for the audit. It may content all the changes
            applied.
        avatarUrl:
          type: string
          description: Avatar for the user to be displayed in the UI for instance.
        country:
          type: string
          description: Country where the user did the operation.
        timestamp:
          type: string
          description: Timestamp representing when the action took place.
          format: date-time
        entity:
          type: string
          description: Entity which has been changed.
      description: Audit log entry
    Keys:
      type: object
      properties:
        signingAlgorithm:
          type: string
        secretKeys:
          type: array
          items:
            $ref: '#/components/schemas/SecretKey'
        publicPrivateKeys:
          type: array
          items:
            $ref: '#/components/schemas/PublicPrivateKey'
      description: The cryptographic keys used to sign the internal JWT tokens. When
        internal JWTs are used.
    UpdateSignedBasicAuth:
      required:
      - password
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the Basic authorization configuration when
        used with HTTP Signatures.
    Key:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the key. It is assigned by the server
            side upon creation. The ID is used to find, delete or update the key.
        type:
          type: string
          description: Type of key sharing between both ends of the communication
          enum:
          - KEYPAIR
          - SECRET
        source:
          type: string
          description: Entity type using the key
          enum:
          - ACCOUNT
          - OAUTH2_PROFILE
        algorithm:
          type: string
          description: The key algorithm
        bitsOrLength:
          type: integer
          description: Bit length of the key.
          format: int32
        username:
          type: string
          description: The username if the key has an Account source
        accountId:
          type: string
          description: The account id if the key has an Account source
        active:
          type: boolean
          description: If the key can be used
        startDate:
          type: string
          description: The key can be used after the mentioned date
          format: date-time
        endDate:
          type: string
          description: The key cannot be used after the mentioned date
          format: date-time
        expiringDate:
          type: string
          description: The key will be flagged as expiring after the mentioned date
          format: date-time
        status:
          type: string
          description: If the key can be used or needs atention because it's expiring
          enum:
          - EXPIRED
          - EXPIRING
          - VALID
        additionalDays:
          type: integer
          description: Even if this key is expired, the entity owning it might have
            other valid keys. This is the number of days until the last key expires
            on that entity.
          format: int32
        needNewKey:
          type: boolean
          description: Even if this key is expired, the entity owning it might have
            other valid keys. If that's not the case, this attribute will be set to
            true
      description: 'Read-only object representing a cryptographic key. Keys are used
        to provide proof of identity. When linked to an account they certify messages
        exchanged using it. When linked to OAuth 2.0 profiles, they certify the authority
        issuing the security tokens. '
    Group:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the group.
        roles:
          type: array
          description: The roles associated with the group.
          items:
            type: string
            description: The roles associated with the group.
        labels:
          type: array
          description: List of associated labels for the group.
          items:
            type: string
            description: List of associated labels for the group.
        name:
          type: string
          description: The name of the group set upon creation.
      description: Group object returned when reading or searching for groups. It's
        a read-only object.
    HttpSignaturesAuth:
      required:
      - algorithm
      - headers
      - keyId
      - requestTarget
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        headers:
          type: array
          description: List of HTTP headers to be signed
          items:
            type: string
            description: List of HTTP headers to be signed
        algorithm:
          type: string
          description: Signature algorithm
        keyId:
          type: string
          description: Signature key ID
        requestTarget:
          type: boolean
          description: Should the pseudo header `(request-target)` be also signed.
            It is composed of the HTTP method and the HTTP path.
      description: HttpSignatures Authorization
    CreateBearerProfile:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the Bearer Profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        required:
          type: boolean
          description: Even if we don't require a JWT, if one is sent, we will validate
            it if required=true.
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs used on this
            profile. It needs to match the issuer field inside the JWT. It's usually
            the URL of the JWT issueing server.
        nbfTolerance:
          type: string
          description: Not before time tolerance in milliseconds. It allows for discrepancies
            in server clocks.
        expTolerance:
          type: string
          description: The JWT time to live in milliseconds. It allows for discrepancies
            in server clocks.
        authorizedAlgorithms:
          type: array
          description: The algorithm that can be used to sign the JWT.
          items:
            type: string
            description: The algorithm that can be used to sign the JWT.
        claims:
          $ref: '#/components/schemas/Claims'
        labels:
          type: array
          description: List of associated labels for the bearer profile.
          items:
            type: string
            description: List of associated labels for the bearer profile.
        name:
          type: string
          description: The human readable name of the Bearer Profile.
        secretKeys:
          type: array
          description: Symmetric cryptographic keys used to validate JWTs used in
            this profile. Depends on the authorized algorithms
          items:
            $ref: '#/components/schemas/CreateSecretKey'
        publicKeys:
          type: array
          description: Asymmetric cryptographic keys used to validate JWTs used in
            this profile. Depends on the authorized algorithms
          items:
            $ref: '#/components/schemas/CreatePublicPrivateKey'
      description: 'Creates a bearer profile. For more information, please check:
        https://tribestream.io/guide/en/api-gateway/reference/current/bearer-profile.html'
    LdapSource:
      required:
      - emailAttribute
      - fullNameAttribute
      - userBaseDn
      - userFilter
      - usernameAttribute
      type: object
      properties:
        userBaseDn:
          type: string
          description: Point from where an ldap server will search for users
          example: ou=people,ou=system
        userFilter:
          type: string
          description: The ldap filter used to identify objects of type user. The
            {username} wildcard must be place in the attribute holding the username.
            See usernameAttribute
          example: (&(objectclass=person)(uid={username}))
        userSubtreeSearch:
          type: boolean
          description: If all of its subordinates to any depth, should be considered
            in the search
          example: true
        usernameAttribute:
          type: string
          description: Which ldap attribute holds the username to use in the account.
            See userFilter.
          example: uid
        fullNameAttribute:
          type: string
          description: Which ldap attribute holding the full name to use in the account
          example: givenname
        emailAttribute:
          type: string
          description: Which ldap attribute holds the email to use in the account
          example: mail
        group:
          $ref: '#/components/schemas/LdapQuery'
        role:
          $ref: '#/components/schemas/LdapQuery'
      description: Used when the source of an account is an LDAP system.
    OAuth2Profile:
      required:
      - allowedGrants
      - claims
      - id
      - issuer
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the OAuth 2.0 profile.
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs for this profile.
            It will be the value for the issuer attribute inside the JWT. By TAG convention,
            the default value is  the server's endpoint where users send the authentication
            challenge.
        refreshToken:
          $ref: '#/components/schemas/RefreshTokenPolicy'
        accessTokenExpireTTL:
          type: string
          description: 'The access token (the JWT) time to live. It allows for discrepancies
            in server clocks. You can use human readable values like: 10 seconds'
        requiresClient:
          type: boolean
          description: If the credentials of a client account are mandatory, while
            authenticating, with this profile.
        queryParamsAllowed:
          type: boolean
          description: 'If the credentials can be used as query parameters. The default
            is false, hence requiring form parameters to be used in the post. It''s
            not recommended to set it to true. '
        responseErrorMapping:
          type: string
          description: File location with customized OAuth 2.0 error messages.
        allowedGrants:
          type: array
          description: The type of challenges that can be used to obtain an access
            token.
          items:
            type: string
            description: The type of challenges that can be used to obtain an access
              token.
            enum:
            - PASSWORD
            - CLIENT_CREDENTIALS
            - REFRESH_TOKEN
        claims:
          type: array
          description: The JWT attributes containing the claims and where the claim
            values come from
          items:
            $ref: '#/components/schemas/ClaimMapping'
        labels:
          type: array
          description: List of associated labels for the OAuth 2.0 profile.
          items:
            type: string
            description: List of associated labels for the OAuth 2.0 profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        id:
          type: string
          description: The unique identifier. It is assigned by the server side upon
            creation. The ID is used to find, delete or update the OAuth2Profile.
        name:
          type: string
          description: The name of the OAuth 2.0 profile set upon creation.
        defaultProfile:
          type: boolean
          description: The default OAuth 2.0 profile will be used to authenticate
            requests without client credentials requiring a particular OAuth 2.0 profile.
        externalSigning:
          $ref: '#/components/schemas/Keys'
        signing:
          $ref: '#/components/schemas/Keys'
      description: 'Read-only object representing an OAuth 2.0 Profile.The OAuth 2.0
        Authentication allows you to generate security tokens and use them to authenticate
        the call to an HTTP Service.For more information, please check: https://tribestream.io/guide/en/api-gateway/reference/current/oauth-2-0-profile.html'
    UpdateAccount:
      type: object
      properties:
        fullname:
          type: string
          description: The complete name of the account.
        description:
          type: string
          description: The markdown description for the account.
        email:
          type: string
          description: The email associated to the account.
        groups:
          type: array
          description: The groups associated with the account.
          items:
            type: string
            description: The groups associated with the account.
        roles:
          type: array
          description: The roles associated with the account. These are stored in
            the TAG
          items:
            type: string
            description: The roles associated with the account. These are stored in
              the TAG
        labels:
          type: array
          description: The labels associated with the account.
          items:
            type: string
            description: The labels associated with the account.
      description: The account represents a user or a client application in the TAG.
        Read-only object returned on search
    Profile:
      required:
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: The unique identifier. It is assigned by the server side upon
            creation. The ID is used to find, delete or update the Profile.
        type:
          type: string
          description: The type of the profile.
          enum:
          - OAUTH2
          - BEARER
          - HTTP_SIGNATURES
          - BASIC
        name:
          type: string
          description: The name of the profile .
        description:
          type: string
          description: The markdown description for the profile.
        defaultProfile:
          type: boolean
          description: The default OAuth 2.0 profile that will be used to authenticate
            requests without client credentials requiring a particular OAuth 2.0 profile.
        claimsCount:
          type: integer
          description: How many caims are defined in the profile.
          format: int32
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs for this profile.
            It will be the value for the issuer attribute inside the JWT. By TAG convention,
            the default value is  the server's endpoint where users send the authentication
            challenge.
        keyAlgorithm:
          type: string
          description: The algorithms being used by the signing keys.
        keyName:
          type: string
          description: The name of the signing keys.
        signatureHeaders:
          type: string
          description: For Http signatures, the headers being signed.
      description: This is a read-only object representing all (OAuth 2.0, Http Signatures,
        bearer,...) profile types. Its main use is to create lists on a UI.
    RoleCountAccountsGroupsRoutes:
      required:
      - accounts
      - groups
      - routes
      type: object
      properties:
        accounts:
          type: integer
          description: The number of accounts where the given role is associated with.
          format: int64
        groups:
          type: integer
          description: The number of groups where the given role is associated with.
          format: int64
        routes:
          type: integer
          description: The number of routes where the given role is associated with.
          format: int64
      description: The RoleCountAccountsGroupsRoutes object is used as a result of
        the total accounts and groups for a given role.
    ApiConnections:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/ApiConnection'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of API connections available for a given search request
        with associated metadata.
    DatabaseConnections:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/DatabaseConnection'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of database connections available for a given search request
        with associated metadata.
    CreateApiClaimSource:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        name:
          type: string
          description: The name of the API claim source
          readOnly: true
          example: My API Claim Source
        apiConfig:
          $ref: '#/components/schemas/ApiConfig'
      description: Object used to create an API Claim source
    BulkRoleResult:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    UpdateSignedCredentials:
      type: object
      properties:
        oauth2:
          type: array
          description: A collection of OAuth2 Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/UpdateSignedOAuth2Auth'
        httpSignature:
          type: array
          description: A collection of HttpSignatures Authentication configuration
            when proxying incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateHttpSignaturesAuth'
        basic:
          type: array
          description: A collection of Basic Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/UpdateSignedBasicAuth'
      description: The credentials of the Route Scenario.
    Groups:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/Group'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of groups available for a given search request with associated
        metadata.
    LdapConnections:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/LdapConnection'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of LDAP connections available for a given search request
        with associated metadata.
    SignatureHeader:
      required:
      - description
      - name
      - required
      type: object
      properties:
        name:
          type: string
          description: The name of the HTTP Header
        description:
          type: string
          description: The markdown description explaining the purpose of the header.
        required:
          type: boolean
          description: If the header is requires. If yes, the authentication will
            fail if that header is missing
      description: Definition of a HTTP Header that will be used in the HTTP Signatures
        authentication process.
    DatabaseConnection:
      required:
      - driver
      - name
      - url
      type: object
      properties:
        id:
          type: string
          description: The internal id of the Database.
        name:
          type: string
          description: The name of the Database.
        description:
          type: string
          description: The description of the Database.
        driver:
          type: string
          description: The full qualified name driver to connect to the Database.
          example: org.hsqldb.jdbc.Driver
        url:
          type: string
          description: The jdbc url to connect to the Database.
          example: jdbc:hsqldb:mem:database
        username:
          type: string
          description: Username to connect to the Database.
        maxActive:
          type: integer
          description: The maximum number of active connections that can be allocated
            from this pool at the same time, or a negative number for no limit.
          format: int32
        maxIdle:
          type: integer
          description: The maximum number of connections that can remain idle in the
            pool, without extra ones being released, or a negative number for no limit.
          format: int32
        maxWaitTime:
          type: string
          description: The maximum number of time that the pool will wait (when there
            are no available connections) for a connection to be returned before throwing
            an exception, or -1 to wait indefinitely.
          example: "3"
        poolPreparedStatements:
          type: boolean
          description: If true, a statement pool is created for each Connection and
            PreparedStatements.
        maxOpenPreparedStatements:
          type: integer
          description: The maximum number of open statements that can be allocated
            from the statement pool at the same time, or zero for no limit.
          format: int32
        validateOnBorrow:
          type: boolean
          description: If true connections will be validated before being returned
            from the pool. If the validation fails, the connection is destroyed, and
            a new conection will be retrieved from the pool (and validated).
        validateOnReturn:
          type: boolean
          description: If true connections will be validated before being returned
            to the pool. If the validation fails, the connection is destroyed instead
            of being returned to the pool.
        validateWhileIdle:
          type: boolean
          description: If true connections will be validated by the idle connection
            evictor (if any). If the validation fails, the connection is destroyed
            and removed from the pool.
        validationQuery:
          type: string
          description: The SQL query that will be used to validate connections from
            this pool before returning them to the caller. If specified, this query
            MUST be an SQL SELECT statement that returns at least one row.
        validationInterval:
          type: string
          description: The number of milliseconds to sleep between runs of the idle
            connection evictor thread. When set to a negative number, no idle connection
            evictor thread will be run.
          example: "3"
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
      description: A model to represent a Database Configuration.
    CreateKeys:
      type: object
      properties:
        signingAlgorithm:
          type: string
        secretKeys:
          type: array
          items:
            $ref: '#/components/schemas/CreateSecretKey'
        publicPrivateKeys:
          type: array
          items:
            $ref: '#/components/schemas/CreatePublicPrivateKey'
      description: The cryptographic keys used to sign the internal JWT tokens. When
        internal JWTs are used.
    CreateCredentials:
      type: object
      properties:
        oauth2:
          type: array
          description: A collection of OAuth2 Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateOAuth2Auth'
        httpSignature:
          type: array
          description: A collection of HttpSignatures Authentication configuration
            when proxying incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateHttpSignaturesAuth'
        basic:
          type: array
          description: A collection of Basic Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateBasicAuth'
      description: The credentials of the API.
    BulkMigrateOAuth2Profile:
      type: object
      properties:
        migrateOAuth2ProfileId:
          type: string
        profiles:
          type: array
          items:
            type: string
    ClaimSourceSummary:
      required:
      - id
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        id:
          type: string
          description: The unique identifier for the claim source. It is assigned
            by the server side upon creation. The ID is used to find, delete or update
            the claim source.
          readOnly: true
          example: my-claim-source
        name:
          type: string
          description: The name of the claim source
          readOnly: true
          example: My API Claim Source
        type:
          type: string
          description: Claim source type.
          example: API
          enum:
          - LDAP
          - DATABASE
          - API
          - ACCOUNT
      description: A model to represent a Claim Source Configuration.
    OAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
      description: OAuth Authorization.
    UpdateCredentials:
      type: object
      properties:
        oauth2:
          type: array
          description: A collection of OAuth2 Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/UpdateOAuth2Auth'
        httpSignature:
          type: array
          description: A collection of HttpSignatures Authentication configuration
            when proxying incoming requests through the API.
          items:
            $ref: '#/components/schemas/UpdateHttpSignaturesAuth'
        basic:
          type: array
          description: A collection of Basic Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/UpdateBasicAuth'
      description: The credentials of the API.
    OAuth2Profiles:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/OAuth2Profile'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of OAuth2 Profiles available for a given search request
        with associated metadata.
    BulkAccountSourceResult:
      type: object
      properties:
        accountSources:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    KeysFilter:
      required:
      - labels
      type: object
      properties:
        labels:
          type: array
          description: The set of unique labels in all returned items. It is used
            to create the labels cloud and ease following filtering.
          items:
            type: string
            description: The set of unique labels in all returned items. It is used
              to create the labels cloud and ease following filtering.
        algorithms:
          type: array
          description: The set of unique algorithms in all returned items.
          items:
            type: string
            description: The set of unique algorithms in all returned items.
        types:
          type: array
          description: The set of unique types in all returned items.
          items:
            type: string
            description: The set of unique types in all returned items.
        statuses:
          type: array
          description: The set of unique statuses in all returned items.
          items:
            type: string
            description: The set of unique statuses in all returned items.
      description: 'The keys filter, part of the page result used on the search request.
        Contains the elements that can be used for filtering: labels, algorithms,
        types and statuses'
    UpdateOAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
      description: OAuth Authorization.
    Ciphers:
      required:
      - ciphers
      type: object
      properties:
        ciphers:
          type: array
          description: The list of Algorithms.
          items:
            type: string
            description: The list of Algorithms.
      description: A model to represent a list of Ciphers.
    UpdateRoute:
      required:
      - modRewrite
      type: object
      properties:
        description:
          type: string
          description: description of the route
        modRewrite:
          type: string
          description: '`mod_rewrite` based syntax for the routing rule.'
        headers:
          type: array
          description: List of headers of the route. Headers can be added, removed
            or appended on the fly.
          items:
            $ref: '#/components/schemas/Header'
        profiles:
          type: array
          description: list of security profiles to trigger when applying this route.
            In order to apply a security profile, at least one `RewriteRule` needs
            to have the `auth` flag.
          items:
            type: string
            description: list of security profiles to trigger when applying this route.
              In order to apply a security profile, at least one `RewriteRule` needs
              to have the `auth` flag.
        profileRequiresAll:
          type: boolean
          description: indicates if all or any of the security profiles have to be
            successfully applied.
        roles:
          type: array
          description: list of roles to enforce after any or all security profiles
            are applied.
          items:
            type: string
            description: list of roles to enforce after any or all security profiles
              are applied.
        roleRequiresAll:
          type: boolean
          description: specifies if any or all roles validation have to succeed.
        labels:
          type: array
          description: list of associated labels for the current route.
          items:
            type: string
            description: list of associated labels for the current route.
      description: Object used to update a route
    AccountSources:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/AccountSourceSummary'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of Account Source available for a given search request
        with associated metadata.
    CreateGroup:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the group.
        roles:
          type: array
          description: The roles associated with the group.
          items:
            type: string
            description: The roles associated with the group.
        labels:
          type: array
          description: List of associated labels for the group.
          items:
            type: string
            description: List of associated labels for the group.
        name:
          type: string
          description: The name of the group.
      description: This object is used to create a group.
    UpdateLdapConnection:
      required:
      - url
      type: object
      properties:
        description:
          type: string
          description: The description of the LDAP.
        url:
          type: string
          description: The url to connect to the LDAP.
          example: host:port
        username:
          type: string
          description: Username to connect to the LDAP.
        useTls:
          type: boolean
          description: If TLS should be used when establishing a new connection to
            LDAP.
        poolMinSize:
          type: integer
          description: Size the pool should be initialized to and pruned to.
          format: int32
        poolMaxSize:
          type: integer
          description: Maximum size the pool can grow to.
          format: int32
        validateOnBorrow:
          type: boolean
          description: Whether connections should be validated when loaned out from
            the pool.
        validateOnReturn:
          type: boolean
          description: Whether connections should be validated when returned to the
            pool.
        validateWhileIdle:
          type: boolean
          description: Whether connections should be validated periodically when the
            pool is idle.
        validationInterval:
          type: string
          description: Period at which pool should be validated.
          example: "3"
        validationBaseDn:
          type: string
          description: LDAP Base DN Query to perform validation.
        validationFilter:
          type: string
          description: LDAP Filter Query to perform validation.
        labels:
          type: array
          description: A collection of labels to tag the LDAP.
          items:
            type: string
            description: A collection of labels to tag the LDAP.
        password:
          type: string
          description: Password to connect to the LDAP.
      description: A model to represent a LDAP Configuration.
    UpdateIndex:
      type: object
      properties:
        indexById:
          type: object
          additionalProperties:
            type: integer
            format: int32
    LdapClaimSource:
      required:
      - id
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        name:
          type: string
          description: The name of the claim source
          readOnly: true
          example: my-ldap-claim-source
        ldapConfig:
          $ref: '#/components/schemas/LdapConfig'
        id:
          type: string
          description: The unique identifier for the claim source. It is assigned
            by the server side upon creation. The ID is used to find, delete or update
            the claim source.
          readOnly: true
          example: my-ldap-claim-source
      description: LDAP Claim source configuration
    BulkGroupResult:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    Algorithms:
      required:
      - algorithms
      type: object
      properties:
        algorithms:
          type: array
          description: The list of Algorithms.
          items:
            $ref: '#/components/schemas/Algorithm'
      description: A model to represent a list of Algorithms.
    HttpHealthCheck:
      type: object
      properties:
        active:
          type: boolean
          description: Is the HTTP Health Check active in the Load Balacing group.
        interval:
          type: string
          description: The interval to perform a HTTP Health Check.
          example: "2"
        maxInterval:
          type: string
          description: The maximum interval to perform a HTTP Health Check.
          example: "2"
        connectionTimeout:
          type: string
          description: The maximum time a connection can wait when connecting to a
            remote host.
          example: "2"
        backoff:
          type: number
          description: Exponential backoff to multiplicatively decrease the rate of
            retries in case of a failure.
        unhealthyAfter:
          type: integer
          description: Number of consecutive failed HTTP Health Check to mark a host
            as unhealthy.
          format: int32
        request:
          $ref: '#/components/schemas/Request'
        response:
          $ref: '#/components/schemas/Response'
      description: A model to represent a HTTP Health Check Configuration.
    UpdateClientSecret:
      required:
      - clientId
      - newClientSecret
      - oldClientSecret
      type: object
      properties:
        clientId:
          type: string
          description: Account's client id.
        oldClientSecret:
          type: string
          description: Account's old client secret.
        newClientSecret:
          type: string
          description: Account's new client secret.
        oAuth2Profile:
          type: string
          writeOnly: true
        oauth2Profile:
          type: string
      description: Update account secret for account type CLIENT
    Parameter:
      required:
      - name
      - placement
      - provider
      type: object
      properties:
        name:
          type: string
          description: name of the parameter.
        placement:
          type: string
          description: specifies the parameter type so the server can build the HTTP
            request.
          enum:
          - HEADER
          - PATH
          - FORM
          - QUERY
        value:
          type: string
          description: value of the parameter. In some cases it is not required.
        signed:
          type: boolean
          description: when using HTTP Signatures to sign the HTTP request, this parameter
            indicates to the server that the current parameter needs to be signed
            as part of HTTP Signatures.
        provider:
          type: string
          description: provider used for this parameter. The provider gives one access
            to powerful extensions.
      description: Parameters are used to build the HTTP request to test a route.
        It is used in the RouteScenario.
    UpdateApiConnection:
      type: object
      properties:
        description:
          type: string
          description: The description of the API.
        headers:
          type: array
          description: A collection of headers to add / set or modify when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/Header'
        pool:
          $ref: '#/components/schemas/Pool'
        hostGroup:
          $ref: '#/components/schemas/HostGroup'
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
        credentials:
          $ref: '#/components/schemas/UpdateCredentials'
      description: A model to represent an API Configuration.
    Credentials:
      type: object
      properties:
        oauth2:
          type: array
          description: A collection of OAuth2 Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/OAuth2Auth'
        httpSignature:
          type: array
          description: A collection of HttpSignatures Authentication configuration
            when proxying incoming requests through the API.
          items:
            $ref: '#/components/schemas/HttpSignaturesAuth'
        basic:
          type: array
          description: A collection of Basic Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/BasicAuth'
      description: The credentials of the API.
    Accounts:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/AccountSummary'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of accounts available for a given search request with
        associated metadata.
    BulkRefreshTokenResult:
      type: object
      properties:
        refreshTokens:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    AccountSummary:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: The username identifying the account upon creation.
        fullname:
          type: string
          description: The complete name of the account.
        description:
          type: string
          description: The markdown description for the account.
        email:
          type: string
          description: The email associated to the account.
      description: The account represents a user or a client application in the TAG.
        Read-only object returned on search
    ApiClaimSource:
      required:
      - id
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        name:
          type: string
          description: The name of the API claim source
          readOnly: true
          example: My API Claim Source
        apiConfig:
          $ref: '#/components/schemas/ApiConfig'
        id:
          type: string
          description: The unique identifier for the claim source. It is assigned
            by the server side upon creation. The ID is used to find, delete or update
            the claim source.
          readOnly: true
      description: API Claim Source configuration
    Drivers:
      required:
      - drivers
      type: object
      properties:
        drivers:
          type: array
          description: The list of Drivers.
          items:
            type: string
            description: The list of Drivers.
      description: A model to represent a list of Database Drivers
    BulkSettingsResult:
      type: object
      properties:
        settings:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    BulkRouteUpdateResult:
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    Label:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: name of the label
      description: The label is used to qualify any other entity in the system. It
        is especially useful to research entities because it makes it possible to
        create business links between them.
    ClaimSources:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/ClaimSourceSummary'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of Claim Source available for a given search request with
        associated metadata.
    AuditEntries:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/AuditEntry'
        filters:
          $ref: '#/components/schemas/AuditEntryFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
        firstEventDate:
          type: string
          description: Start date for the first audit log event
          format: date-time
        lastEventDate:
          type: string
          description: End date for the audit log
          format: date-time
      description: The system tracks all actions on the configuration using audit
        logs. One can look for audit logs using the related REST resource. It will
        return the following object.
    BulkAccountResult:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    BulkHttpSignaturesProfileResult:
      type: object
      properties:
        httpSignatureProfiles:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    RefreshToken:
      type: object
      properties:
        tokenId:
          type: string
        keyId:
          type: string
        username:
          type: string
        clientId:
          type: string
        grantType:
          type: string
        profile:
          type: string
        created:
          type: string
          format: date-time
        expired:
          type: string
          format: date-time
      description: The refresh token is used to list all currently valid refresh tokens
        and perform some actions.
    CreateSignedOAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the OAuth2 authorization configuration when
        used with HTTP Signatures.
    UpdateDatabaseClaimSource:
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        databaseConfig:
          $ref: '#/components/schemas/DbConfig'
      description: Used to update a database Claim Source.
    CreatePublicPrivateKey:
      required:
      - privateValue
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
        id:
          type: string
        publicValue:
          type: string
        algorithm:
          type: string
        type:
          type: string
        bits:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        privateValue:
          type: string
          description: The private value of the key pair
      description: Used in the creation of asymmetric keys
    PublicPrivateKeyValue:
      required:
      - privateValue
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
        id:
          type: string
        publicValue:
          type: string
        algorithm:
          type: string
        type:
          type: string
        bits:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        privateValue:
          type: string
          description: The private value of the key pair
      description: Used in the creation of asymmetric keys
    Route:
      required:
      - id
      - modRewrite
      - name
      type: object
      properties:
        description:
          type: string
          description: description of the route
        modRewrite:
          type: string
          description: '`mod_rewrite` based syntax for the routing rule.'
        headers:
          type: array
          description: List of headers of the route. Headers can be added, removed
            or appended on the fly.
          items:
            $ref: '#/components/schemas/Header'
        profiles:
          type: array
          description: list of security profiles to trigger when applying this route.
            In order to apply a security profile, at least one `RewriteRule` needs
            to have the `auth` flag.
          items:
            type: string
            description: list of security profiles to trigger when applying this route.
              In order to apply a security profile, at least one `RewriteRule` needs
              to have the `auth` flag.
        profileRequiresAll:
          type: boolean
          description: indicates if all or any of the security profiles have to be
            successfully applied.
        roles:
          type: array
          description: list of roles to enforce after any or all security profiles
            are applied.
          items:
            type: string
            description: list of roles to enforce after any or all security profiles
              are applied.
        roleRequiresAll:
          type: boolean
          description: specifies if any or all roles validation have to succeed.
        labels:
          type: array
          description: list of associated labels for the current route.
          items:
            type: string
            description: list of associated labels for the current route.
        id:
          type: string
          description: id assigned on the server upon creation.
        name:
          type: string
          description: name of the route
      description: The route is used to defined routing / proxying rules. The current
        supported format is `mod_rewrite` but it will be extended soon.
    BulkRoleGroupAssociate:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
        groups:
          type: array
          items:
            type: string
      description: TODO
    UpdateApiClaimSource:
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        apiConfig:
          $ref: '#/components/schemas/ApiConfig'
      description: Used to update an API Claim Source.
    BulkApiConnectionResult:
      type: object
      properties:
        apiConnections:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    HttpSignatureProfiles:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/HttpSignatureProfile'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of HTTP Signature Profiles available for a given search
        request with associated metadata.
    Claims:
      type: object
      properties:
        principalAttribute:
          type: string
        roleAttributes:
          type: array
          items:
            type: string
      description: The JWT attributes containing the claims.
    UpdateBearerProfile:
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the Bearer Profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        required:
          type: boolean
          description: Even if we don't require a JWT, if one is sent, we will validate
            it if required=true.
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs used on this
            profile. It needs to match the issuer field inside the JWT. It's usually
            the URL of the JWT issueing server.
        nbfTolerance:
          type: string
          description: Not before time tolerance in milliseconds. It allows for discrepancies
            in server clocks.
        expTolerance:
          type: string
          description: The JWT time to live in milliseconds. It allows for discrepancies
            in server clocks.
        authorizedAlgorithms:
          type: array
          description: The algorithm that can be used to sign the JWT.
          items:
            type: string
            description: The algorithm that can be used to sign the JWT.
        claims:
          $ref: '#/components/schemas/Claims'
        labels:
          type: array
          description: List of associated labels for the bearer profile.
          items:
            type: string
            description: List of associated labels for the bearer profile.
      description: 'Updated a bearer profile. For more information, please check:
        https://tribestream.io/guide/en/api-gateway/reference/current/bearer-profile.html'
    Setting:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
          description: The key of the Setting.
          enum:
          - '  com.tomitribe.tribestream.tag.console.SetupInitializer.alreadyCreatedExamples,com.tomitribe.tribestream.tag.console.resource.route.RouteItem,com.tomitribe.tribestream.tag.console.configuration.TAGUIConfiguration.oauth2Endpoint,com.tomitribe.tribestream.tag.console.configuration.TAGUIConfiguration.oauth2ClientSecret,com.tomitribe.tribestream.tag.console.configuration.TAGUIConfiguration.oauth2ClientId,com.tomitribe.tribestream.container.service.Policies.passwordValidity,com.tomitribe.tribestream.container.service.Policies.passwordMinSize,com.tomitribe.tribestream.container.service.Policies.keyValidity,com.tomitribe.tribestream.container.service.Policies.keyPairValidity,com.tomitribe.tribestream.container.service.Policies.keyPairOverlapping,com.tomitribe.tribestream.container.service.Policies.keyPairMaxNumber,com.tomitribe.tribestream.container.service.Policies.keyPairDefaultSize,com.tomitribe.tribestream.container.service.Policies.keyPairAllowedKeyAlgorithms,com.tomitribe.tribestream.container.service.Policies.keyOverlapping,com.tomitribe.tribestream.container.service.Policies.keyMaxNumber,com.tomitribe.tribestream.container.service.Policies.keyAllowedKeyAlgorithms,com.tomitribe.tribestream.container.service.Policies.clientSecretValidity,com.tomitribe.tribestream.container.service.Policies.clientSecretMinSize,com.tomitribe.tribestream.container.service.Policies.clientSecretMaxSize,com.tomitribe.tribestream.container.service.PermissionsConfiguration.accountAdminRoleName,com.tomitribe.tribestream.container.service.PasswordService.salt,com.tomitribe.tribestream.container.service.PasswordService.iterations,com.tomitribe.tribestream.container.service.PasswordService.hash,com.tomitribe.tribestream.container.service.GracefulReleaser.interval,com.tomitribe.tribestream.container.oauth2.OAuth2Configuration.defaultProfile'
        value:
          type: string
          description: The value of the Setting.
        format:
          type: string
          description: The format of the Setting.
          readOnly: true
          enum:
          - TEXT
          - CIPHER
          - DURATION
      description: A model to represent a TAG Setting.
    UpdateLdapAccountSource:
      required:
      - connection
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the account source.
          example: A description for the account source
        index:
          type: integer
          description: The priority assigned to the account source. Values must be
            greater than 1. 0 is reserved to gateway accounts.
          format: int32
          example: 1
        labels:
          type: array
          description: The labels associated with the account.
          example: account-from-ldap,source
          items:
            type: string
            description: The labels associated with the account.
        connection:
          type: string
          description: The connection id used to connect.
          example: phone-line
        ldapSource:
          $ref: '#/components/schemas/LdapSource'
      description: Object used on updates. The account source represents a where the
        original account data is stored.
    Algorithm:
      required:
      - description
      - name
      type: object
      properties:
        name:
          type: string
          description: The portable Signature Algorithm name.
        description:
          type: string
          description: The portable Signature Algorithm description.
      description: A model to represent a list of Algorithms
    BearerProfile:
      required:
      - id
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the Bearer Profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        required:
          type: boolean
          description: Even if we don't require a JWT, if one is sent, we will validate
            it if required=true.
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs used on this
            profile. It needs to match the issuer field inside the JWT. It's usually
            the URL of the JWT issueing server.
        nbfTolerance:
          type: string
          description: Not before time tolerance in milliseconds. It allows for discrepancies
            in server clocks.
        expTolerance:
          type: string
          description: The JWT time to live in milliseconds. It allows for discrepancies
            in server clocks.
        authorizedAlgorithms:
          type: array
          description: The algorithm that can be used to sign the JWT.
          items:
            type: string
            description: The algorithm that can be used to sign the JWT.
        claims:
          $ref: '#/components/schemas/Claims'
        labels:
          type: array
          description: List of associated labels for the bearer profile.
          items:
            type: string
            description: List of associated labels for the bearer profile.
        id:
          type: string
          description: The unique identifier for the Bearer Profile. It is assigned
            by the server side upon creation. The ID is used to find, delete or update
            the Bearer Profile.
        name:
          type: string
          description: The human readable name of the Bearer Profile.
        secretKeys:
          type: array
          description: Symmetric cryptographic keys used to validate JWTs used in
            this profile. Depends on the authorized algorithms
          items:
            $ref: '#/components/schemas/SecretKey'
        publicKeys:
          type: array
          description: Asymmetric cryptographic keys used to validate JWTs used in
            this profile. Depends on the authorized algorithms
          items:
            $ref: '#/components/schemas/PublicPrivateKey'
      description: 'The Bearer Authentication allows you to authenticate an HTTP Service
        using security tokens. For more information, please check: https://tribestream.io/guide/en/api-gateway/reference/current/bearer-profile.html'
    CreateSignedCredentials:
      type: object
      properties:
        oauth2:
          type: array
          description: A collection of OAuth2 Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateSignedOAuth2Auth'
        httpSignature:
          type: array
          description: A collection of HttpSignatures Authentication configuration
            when proxying incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateHttpSignaturesAuth'
        basic:
          type: array
          description: A collection of Basic Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateSignedBasicAuth'
      description: The credentials of the Route Scenario.
    BulkRoleAccountAssociate:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
        accounts:
          type: array
          items:
            type: string
      description: TODO
    Role:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the role.
        labels:
          type: array
          description: List of associated labels for the role.
          items:
            type: string
            description: List of associated labels for the role.
        groups:
          type: array
          description: List of associated groups for the role.
          items:
            type: string
            description: List of associated groups for the role.
        name:
          type: string
          description: The name of the role set upon creation.
      description: Role object returned when reading or searching for roles. It's
        a read-only object.
    DebugHeader:
      required:
      - active
      - description
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the HTTP Header
        description:
          type: string
          description: The markdown description explaining the purpose of the header.
        active:
          type: boolean
          description: If the debug header is active.
      description: Definition of a HTTP Header that can be used to debug the HTTP
        Signatures authentication process.
    CreateDatabaseConnection:
      required:
      - driver
      - name
      - url
      type: object
      properties:
        name:
          type: string
          description: The name of the Database.
        description:
          type: string
          description: The description of the Database.
        driver:
          type: string
          description: The full qualified name driver to connect to the Database.
          example: org.hsqldb.jdbc.Driver
        url:
          type: string
          description: The jdbc url to connect to the Database.
          example: jdbc:hsqldb:mem:database
        username:
          type: string
          description: Username to connect to the Database.
        password:
          type: string
          description: Password to connect to the Database.
        maxActive:
          type: integer
          description: The maximum number of active connections that can be allocated
            from this pool at the same time, or a negative number for no limit.
          format: int32
        maxIdle:
          type: integer
          description: The maximum number of connections that can remain idle in the
            pool, without extra ones being released, or a negative number for no limit.
          format: int32
        maxWaitTime:
          type: string
          description: The maximum number of time that the pool will wait (when there
            are no available connections) for a connection to be returned before throwing
            an exception, or -1 to wait indefinitely.
          example: "3"
        poolPreparedStatements:
          type: boolean
          description: If true, a statement pool is created for each Connection and
            PreparedStatements.
        maxOpenPreparedStatements:
          type: integer
          description: The maximum number of open statements that can be allocated
            from the statement pool at the same time, or zero for no limit.
          format: int32
        validateOnBorrow:
          type: boolean
          description: If true connections will be validated before being returned
            from the pool. If the validation fails, the connection is destroyed, and
            a new conection will be retrieved from the pool (and validated).
        validateOnReturn:
          type: boolean
          description: If true connections will be validated before being returned
            to the pool. If the validation fails, the connection is destroyed instead
            of being returned to the pool.
        validateWhileIdle:
          type: boolean
          description: If true connections will be validated by the idle connection
            evictor (if any). If the validation fails, the connection is destroyed
            and removed from the pool.
        validationQuery:
          type: string
          description: The SQL query that will be used to validate connections from
            this pool before returning them to the caller. If specified, this query
            MUST be an SQL SELECT statement that returns at least one row.
        validationInterval:
          type: string
          description: The number of milliseconds to sleep between runs of the idle
            connection evictor thread. When set to a negative number, no idle connection
            evictor thread will be run.
          example: "3"
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
      description: A model to represent a Database Configuration.
    UpdateOAuth2Profile:
      required:
      - allowedGrants
      - claims
      - issuer
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the OAuth 2.0 profile.
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs for this profile.
            It will be the value for the issuer attribute inside the JWT. By TAG convention,
            the default value is  the server's endpoint where users send the authentication
            challenge.
        refreshToken:
          $ref: '#/components/schemas/RefreshTokenPolicy'
        accessTokenExpireTTL:
          type: string
          description: 'The access token (the JWT) time to live. It allows for discrepancies
            in server clocks. You can use human readable values like: 10 seconds'
        requiresClient:
          type: boolean
          description: If the credentials of a client account are mandatory, while
            authenticating, with this profile.
        queryParamsAllowed:
          type: boolean
          description: 'If the credentials can be used as query parameters. The default
            is false, hence requiring form parameters to be used in the post. It''s
            not recommended to set it to true. '
        responseErrorMapping:
          type: string
          description: File location with customized OAuth 2.0 error messages.
        allowedGrants:
          type: array
          description: The type of challenges that can be used to obtain an access
            token.
          items:
            type: string
            description: The type of challenges that can be used to obtain an access
              token.
            enum:
            - PASSWORD
            - CLIENT_CREDENTIALS
            - REFRESH_TOKEN
        claims:
          type: array
          description: The JWT attributes containing the claims and where the claim
            values come from
          items:
            $ref: '#/components/schemas/ClaimMapping'
        labels:
          type: array
          description: List of associated labels for the OAuth 2.0 profile.
          items:
            type: string
            description: List of associated labels for the OAuth 2.0 profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
      description: 'Creates objects defining updates to the OAuth 2.0 profiles.The
        OAuth 2.0 Authentication allows you to generate security tokens and use them
        to authenticate the call to an HTTP Service.For more information, please check:
        https://tribestream.io/guide/en/api-gateway/reference/current/oauth-2-0-profile.html'
    RouteScenario:
      required:
      - id
      - method
      - name
      type: object
      properties:
        method:
          type: string
          description: HTTP Method to simulate the call to the proxy.
          enum:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - HEAD
        resourceUrl:
          type: string
        parameters:
          type: array
          description: parameters to build the HTTP request for test. It can be an
            HTTP header, or a form parameter orany supported types.
          items:
            $ref: '#/components/schemas/Parameter'
        payload:
          type: string
          description: message payload to be sent. This is required when using a POST
            or PUT for instance.
        id:
          type: string
          description: id of the route scenario.
        name:
          type: string
          description: name of the route scenario.
        credentials:
          $ref: '#/components/schemas/Credentials'
      description: The route scenario aims at describing a scenario to test routes.
        It is used by the UI only for the test route feature.
    CreateHttpSignaturesAuth:
      required:
      - algorithm
      - headers
      - keyId
      - keyValue
      - requestTarget
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        headers:
          type: array
          description: List of HTTP headers to be signed
          items:
            type: string
            description: List of HTTP headers to be signed
        algorithm:
          type: string
          description: Signature algorithm
        keyId:
          type: string
          description: Signature key ID
        requestTarget:
          type: boolean
          description: Should the pseudo header `(request-target)` be also signed.
            It is composed of the HTTP method and the HTTP path.
        keyValue:
          type: string
          description: Signature key value
      description: HttpSignatures Authorization
    CreateOAuth2Profile:
      required:
      - allowedGrants
      - claims
      - issuer
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the OAuth 2.0 profile.
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs for this profile.
            It will be the value for the issuer attribute inside the JWT. By TAG convention,
            the default value is  the server's endpoint where users send the authentication
            challenge.
        refreshToken:
          $ref: '#/components/schemas/RefreshTokenPolicy'
        accessTokenExpireTTL:
          type: string
          description: 'The access token (the JWT) time to live. It allows for discrepancies
            in server clocks. You can use human readable values like: 10 seconds'
        requiresClient:
          type: boolean
          description: If the credentials of a client account are mandatory, while
            authenticating, with this profile.
        queryParamsAllowed:
          type: boolean
          description: 'If the credentials can be used as query parameters. The default
            is false, hence requiring form parameters to be used in the post. It''s
            not recommended to set it to true. '
        responseErrorMapping:
          type: string
          description: File location with customized OAuth 2.0 error messages.
        allowedGrants:
          type: array
          description: The type of challenges that can be used to obtain an access
            token.
          items:
            type: string
            description: The type of challenges that can be used to obtain an access
              token.
            enum:
            - PASSWORD
            - CLIENT_CREDENTIALS
            - REFRESH_TOKEN
        claims:
          type: array
          description: The JWT attributes containing the claims and where the claim
            values come from
          items:
            $ref: '#/components/schemas/ClaimMapping'
        labels:
          type: array
          description: List of associated labels for the OAuth 2.0 profile.
          items:
            type: string
            description: List of associated labels for the OAuth 2.0 profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        name:
          type: string
          description: The name of the OAuth 2.0 profile set upon creation.
        externalSigning:
          $ref: '#/components/schemas/CreateKeys'
        signing:
          $ref: '#/components/schemas/CreateKeys'
      description: 'Creates objects defining new OAuth 2.0 profiles.The OAuth 2.0
        Authentication allows you to generate security tokens and use them to authenticate
        the call to an HTTP Service.For more information, please check: https://tribestream.io/guide/en/api-gateway/reference/current/oauth-2-0-profile.html'
    RouteScenarios:
      required:
      - items
      - total
      type: object
      properties:
        items:
          type: array
          description: The list of items for the given page. The list may be a partial
            list when pagination is used (default)
          items:
            $ref: '#/components/schemas/RouteScenario'
        filters:
          $ref: '#/components/schemas/DefaultFilter'
        pagingState:
          type: string
          description: The paging state is used for paginating results call after
            call. It needs to be passed in again on the next search request.
        total:
          type: integer
          description: The total number of items for the search request. It may be
            higher than the number of items returned because of the pagination.
          format: int64
      description: The list of routes scenario available for a given search request
        with associated metadata.
    CreateOAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
      description: OAuth Authorization.
    Headers:
      required:
      - headers
      type: object
      properties:
        headers:
          type: array
          description: The list of Headers.
          items:
            $ref: '#/components/schemas/Header'
      description: A model to represent a list of Headers.
    BulkKeyResult:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    CreateRoute:
      required:
      - modRewrite
      - name
      type: object
      properties:
        description:
          type: string
          description: description of the route
        modRewrite:
          type: string
          description: '`mod_rewrite` based syntax for the routing rule.'
        headers:
          type: array
          description: List of headers of the route. Headers can be added, removed
            or appended on the fly.
          items:
            $ref: '#/components/schemas/Header'
        profiles:
          type: array
          description: list of security profiles to trigger when applying this route.
            In order to apply a security profile, at least one `RewriteRule` needs
            to have the `auth` flag.
          items:
            type: string
            description: list of security profiles to trigger when applying this route.
              In order to apply a security profile, at least one `RewriteRule` needs
              to have the `auth` flag.
        profileRequiresAll:
          type: boolean
          description: indicates if all or any of the security profiles have to be
            successfully applied.
        roles:
          type: array
          description: list of roles to enforce after any or all security profiles
            are applied.
          items:
            type: string
            description: list of roles to enforce after any or all security profiles
              are applied.
        roleRequiresAll:
          type: boolean
          description: specifies if any or all roles validation have to succeed.
        labels:
          type: array
          description: list of associated labels for the current route.
          items:
            type: string
            description: list of associated labels for the current route.
        name:
          type: string
          description: name of the route
      description: Object used to create a route
    HostGroup:
      required:
      - hosts
      type: object
      properties:
        hosts:
          type: array
          description: A collection of hosts that compose the Load Balancer.
          items:
            $ref: '#/components/schemas/Host'
        strategy:
          $ref: '#/components/schemas/Strategy'
        httpHealthCheck:
          $ref: '#/components/schemas/HttpHealthCheck'
      description: A model to represent a Load Balancer Configuration.
    CreateLdapClaimSource:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        name:
          type: string
          description: The name of the claim source
          readOnly: true
          example: my-ldap-claim-source
        ldapConfig:
          $ref: '#/components/schemas/LdapConfig'
      description: A model to represent a Claim Source Configuration.
    UpdateRouteScenario:
      required:
      - method
      type: object
      properties:
        method:
          type: string
          description: HTTP Method to simulate the call to the proxy.
          enum:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - HEAD
        resourceUrl:
          type: string
        parameters:
          type: array
          description: parameters to build the HTTP request for test. It can be an
            HTTP header, or a form parameter orany supported types.
          items:
            $ref: '#/components/schemas/Parameter'
        payload:
          type: string
          description: message payload to be sent. This is required when using a POST
            or PUT for instance.
        credentials:
          $ref: '#/components/schemas/UpdateSignedCredentials'
      description: Used only to update a route scenario.
    LdapConfig:
      required:
      - basedn
      - filter
      type: object
      properties:
        basedn:
          type: string
          description: Point from where an ldap server will search
          example: CN=users,DC=pidemo,DC=corp,DC=superbiz,DC=org
        filter:
          type: string
          description: The ldap filter used to identify the objects to retrieve
          example: (&(objectClass=person)(sAMAccountName={username}))
        subtreeSearch:
          type: boolean
          description: If all of its subordinates to any depth, should be considered
            in the search
          example: false
      description: Object holding all LDAP configuration for LDAP claim sources
    UpdateRole:
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the role.
        labels:
          type: array
          description: List of associated labels for the role.
          items:
            type: string
            description: List of associated labels for the role.
        groups:
          type: array
          description: List of associated groups for the role.
          items:
            type: string
            description: List of associated groups for the role.
      description: This object is used to update a role.
    CreateBasicAuth:
      required:
      - password
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
      description: Basic Authorization
    DebugHeaders:
      required:
      - debugHeaders
      type: object
      properties:
        debugHeaders:
          type: array
          description: The list of Debug Headers.
          items:
            $ref: '#/components/schemas/DebugHeader'
      description: A model to represent a list of Debug Headers.
    BulkOAuth2ProfileMigrateResult:
      type: object
      properties:
        oauth2Profiles:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
      description: TODO
    CreateDatabaseClaimSource:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          example: claims, facebook, profile
          items:
            type: string
            description: The labels associated with the claim source.
        name:
          type: string
          description: The name of the claim source
          readOnly: true
          example: My database Claim Source
        databaseConfig:
          $ref: '#/components/schemas/DbConfig'
      description: Used to create a database Claim Source.
    Password:
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
      description: Represents the user account password. The value itself is not accessible.
    CreateRole:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the role.
        labels:
          type: array
          description: List of associated labels for the role.
          items:
            type: string
            description: List of associated labels for the role.
        groups:
          type: array
          description: List of associated groups for the role.
          items:
            type: string
            description: List of associated groups for the role.
        name:
          type: string
          description: The name of the role.
      description: This object is used to create a role.
    AuthorizationHeader:
      required:
      - name
      - scheme
      type: object
      properties:
        name:
          type: string
          description: HTTP header name
        scheme:
          type: string
          description: HTTP authorization schema.
      description: Represents an HTTP authorization header. It can be used with any
        authorization mechanism.
    KeystoreAlgorithms:
      type: object
      properties:
        typesMap:
          type: object
          additionalProperties:
            type: string
            enum:
            - SYMMETRIC
            - ASYMMETRIC
            - DIGEST
            - UNKNOWN
    Request:
      required:
      - endpoint
      - method
      type: object
      properties:
        method:
          type: string
          description: The HTTP method to use when performing the HTTP Health Check.
          enum:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - HEAD
        endpoint:
          type: string
          description: The endpoint to use when performing the HTTP Health Check.
        headers:
          type: array
          description: A collection of headers to add / set when performing the HTTP
            Health Check.
          items:
            $ref: '#/components/schemas/Header'
      description: The Request configuration to perform a HTTP Health Check.
    ExternalAccountSummary:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: The username identifying the account upon creation.
        fullname:
          type: string
          description: The complete name of the account.
        description:
          type: string
          description: The markdown description for the account.
        email:
          type: string
          description: The email associated to the account.
        accountSource:
          type: string
          description: The account source where the username has been found.
      description: The account summary used for account source search
    Host:
      required:
      - location
      type: object
      properties:
        location:
          type: string
          description: The host location, including the scheme, the host name and
            the port.
          example: https://my.api.com:8090
        active:
          type: boolean
          description: Is the host active in the Load Balacing group.
        weight:
          type: integer
          description: The weight of the host in the Load Balancing group. A zero
            or negative value will effectively skip all traffic to this particular
            host.
          format: int32
        health:
          type: integer
          description: A percentage from 0 to 100 with the host availability. The
            value is only available if a TCP or HTTP health check is configured.
          format: int32
          readOnly: true
        lastSeen:
          type: string
          description: The last seen date of the host. The value is only available
            if a TCP or HTTP health check is configured.
          format: date-time
          readOnly: true
      description: A model to represent a Load Balancer Host.
    CreateLdapConnection:
      required:
      - name
      - url
      type: object
      properties:
        description:
          type: string
          description: The description of the LDAP.
        url:
          type: string
          description: The url to connect to the LDAP.
          example: host:port
        username:
          type: string
          description: Username to connect to the LDAP.
        useTls:
          type: boolean
          description: If TLS should be used when establishing a new connection to
            LDAP.
        poolMinSize:
          type: integer
          description: Size the pool should be initialized to and pruned to.
          format: int32
        poolMaxSize:
          type: integer
          description: Maximum size the pool can grow to.
          format: int32
        validateOnBorrow:
          type: boolean
          description: Whether connections should be validated when loaned out from
            the pool.
        validateOnReturn:
          type: boolean
          description: Whether connections should be validated when returned to the
            pool.
        validateWhileIdle:
          type: boolean
          description: Whether connections should be validated periodically when the
            pool is idle.
        validationInterval:
          type: string
          description: Period at which pool should be validated.
          example: "3"
        validationBaseDn:
          type: string
          description: LDAP Base DN Query to perform validation.
        validationFilter:
          type: string
          description: LDAP Filter Query to perform validation.
        labels:
          type: array
          description: A collection of labels to tag the LDAP.
          items:
            type: string
            description: A collection of labels to tag the LDAP.
        name:
          type: string
          description: The name of the LDAP.
        password:
          type: string
          description: Password to connect to the LDAP.
      description: A model to represent a LDAP Configuration.
    BulkClaimSourceResult:
      type: object
      properties:
        claimSources:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
    Response:
      type: object
      properties:
        status:
          type: integer
          description: The HTTP status code returned by the HTTP Health Check.
          format: int32
      description: The Response returned by the HTTP Health Check.
      readOnly: true
    ClaimMapping:
      type: object
      properties:
        type:
          type: string
          enum:
          - CLAIM
          - PRINCIPAL
          - ROLE
        source:
          type: string
        target:
          type: string
        claimSourceType:
          type: string
          enum:
          - LDAP
          - DATABASE
          - API
          - ACCOUNT
        claimSourceRef:
          type: string
      description: The JWT attributes containing the claims and where the claim values
        come from
    UpdateHttpSignaturesAuth:
      required:
      - algorithm
      - headers
      - keyId
      - keyValue
      - requestTarget
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        headers:
          type: array
          description: List of HTTP headers to be signed
          items:
            type: string
            description: List of HTTP headers to be signed
        algorithm:
          type: string
          description: Signature algorithm
        keyId:
          type: string
          description: Signature key ID
        requestTarget:
          type: boolean
          description: Should the pseudo header `(request-target)` be also signed.
            It is composed of the HTTP method and the HTTP path.
        keyValue:
          type: string
          description: Signature key value
      description: HttpSignatures Authorization
    UpdateStates:
      type: object
      properties:
        stateById:
          type: object
          additionalProperties:
            type: boolean
    BasicAuth:
      required:
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
      description: Basic Authorization
    ClientSecret:
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
        oauth2ProfileRef:
          type: string
      description: Represents the client account password. The value itself is not
        accessible.
    Signature:
      type: object
      properties:
        algorithms:
          type: array
          description: The algorithm used to compute the signature.
          items:
            type: string
            description: The algorithm used to compute the signature.
        headers:
          type: array
          description: The headers that will be included in the signature computation
          items:
            $ref: '#/components/schemas/SignatureHeader'
        dateHeader:
          $ref: '#/components/schemas/DateHeader'
        digestHeader:
          $ref: '#/components/schemas/DigestHeader'
      description: How the Http Signature will be calculated
    UpdateDatabaseConnection:
      required:
      - driver
      - url
      type: object
      properties:
        description:
          type: string
          description: The description of the Database.
        driver:
          type: string
          description: The full qualified name driver to connect to the Database.
          example: org.hsqldb.jdbc.Driver
        url:
          type: string
          description: The jdbc url to connect to the Database.
          example: jdbc:hsqldb:mem:database
        username:
          type: string
          description: Username to connect to the Database.
        password:
          type: string
          description: Password to connect to the Database.
        maxActive:
          type: integer
          description: The maximum number of active connections that can be allocated
            from this pool at the same time, or a negative number for no limit.
          format: int32
        maxIdle:
          type: integer
          description: The maximum number of connections that can remain idle in the
            pool, without extra ones being released, or a negative number for no limit.
          format: int32
        maxWaitTime:
          type: string
          description: The maximum number of time that the pool will wait (when there
            are no available connections) for a connection to be returned before throwing
            an exception, or -1 to wait indefinitely.
          example: "3"
        poolPreparedStatements:
          type: boolean
          description: If true, a statement pool is created for each Connection and
            PreparedStatements.
        maxOpenPreparedStatements:
          type: integer
          description: The maximum number of open statements that can be allocated
            from the statement pool at the same time, or zero for no limit.
          format: int32
        validateOnBorrow:
          type: boolean
          description: If true connections will be validated before being returned
            from the pool. If the validation fails, the connection is destroyed, and
            a new conection will be retrieved from the pool (and validated).
        validateOnReturn:
          type: boolean
          description: If true connections will be validated before being returned
            to the pool. If the validation fails, the connection is destroyed instead
            of being returned to the pool.
        validateWhileIdle:
          type: boolean
          description: If true connections will be validated by the idle connection
            evictor (if any). If the validation fails, the connection is destroyed
            and removed from the pool.
        validationQuery:
          type: string
          description: The SQL query that will be used to validate connections from
            this pool before returning them to the caller. If specified, this query
            MUST be an SQL SELECT statement that returns at least one row.
        validationInterval:
          type: string
          description: The number of milliseconds to sleep between runs of the idle
            connection evictor thread. When set to a negative number, no idle connection
            evictor thread will be run.
          example: "3"
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
      description: A model to represent a Database Configuration.
    Strategy:
      required:
      - maxRetries
      - strategy
      type: object
      properties:
        strategy:
          type: string
          description: The Load Balancing Strategy to use.
          enum:
          - ROUND_ROBIN
          - LEAST_CONNECTED
          - SINGLE_HOST
        maxRetries:
          type: integer
          description: The max number of retries to execute an incoming proxy request
            before failing it completely.
          format: int32
      description: A model to represent a Load Balancing Strategy.
    CreateApiConnection:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The description of the API.
        headers:
          type: array
          description: A collection of headers to add / set or modify when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/Header'
        pool:
          $ref: '#/components/schemas/Pool'
        hostGroup:
          $ref: '#/components/schemas/HostGroup'
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
        name:
          type: string
          description: The name of the API.
        credentials:
          $ref: '#/components/schemas/CreateCredentials'
      description: A model to represent an API Configuration.
    CreateHttpSignatureProfile:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the http signature profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        signature:
          $ref: '#/components/schemas/Signature'
        debugHeaders:
          type: array
          description: The headers that can be activated to debug issues with the
            http signatures authentication
          items:
            type: string
            description: The headers that can be activated to debug issues with the
              http signatures authentication
        labels:
          type: array
          description: List of associated labels for the http signature profile.
          items:
            type: string
            description: List of associated labels for the http signature profile.
        name:
          type: string
          description: The name of the http signatures profile set upon creation.
      description: 'Used to creation and update HTTP signatures profiles. For details
        about HTTP signatures profiles, please check: https://tribestream.io/guide/en/api-gateway/reference/current/http-signature-profile.html'
    AccountSourceSummary:
      type: object
      description: The list of items for the given page. The list may be a partial
        list when pagination is used (default)
    CreateSecretKey:
      required:
      - value
      type: object
      properties:
        createdDate:
          type: string
          description: Creation date for the credential
          format: date-time
        active:
          type: boolean
          description: true if the credential is currently active.
        id:
          type: string
        spec:
          type: string
        type:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        value:
          type: string
          description: The value of the secret key
      description: Used in the creation of symmetric keys
    UpdateSignedOAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the OAuth2 authorization configuration when
        used with HTTP Signatures.
    UpdateGroup:
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the group.
        roles:
          type: array
          description: The roles associated with the group.
          items:
            type: string
            description: The roles associated with the group.
        labels:
          type: array
          description: List of associated labels for the group.
          items:
            type: string
            description: List of associated labels for the group.
      description: This object is used to update a group.
    RefreshTokenPolicy:
      type: object
      properties:
        refreshAllowed:
          type: boolean
          description: If the refresh token is allowed
        refreshTokenExpireTTL:
          type: string
          description: 'If the refresh token is allowed, it can be used to retrieve
            a new access token until this time to live is reached. It allows for discrepancies
            in server clocks. You can use human readable values like: 10 seconds'
        refreshTokenGrantTTL:
          type: string
          description: Session time adter login
        refreshTokenMaxAllowedRefreshes:
          type: integer
          description: If the refresh token is allowed, it sets the maximum amount
            of times the refresh token can be used before  the users need send the
            authentication challenge again and request new tokens
          format: int32
      description: This object is used to configure the access token behaviour.
    LdapConnection:
      required:
      - name
      - url
      type: object
      properties:
        description:
          type: string
          description: The description of the LDAP.
        url:
          type: string
          description: The url to connect to the LDAP.
          example: host:port
        username:
          type: string
          description: Username to connect to the LDAP.
        useTls:
          type: boolean
          description: If TLS should be used when establishing a new connection to
            LDAP.
        poolMinSize:
          type: integer
          description: Size the pool should be initialized to and pruned to.
          format: int32
        poolMaxSize:
          type: integer
          description: Maximum size the pool can grow to.
          format: int32
        validateOnBorrow:
          type: boolean
          description: Whether connections should be validated when loaned out from
            the pool.
        validateOnReturn:
          type: boolean
          description: Whether connections should be validated when returned to the
            pool.
        validateWhileIdle:
          type: boolean
          description: Whether connections should be validated periodically when the
            pool is idle.
        validationInterval:
          type: string
          description: Period at which pool should be validated.
          example: "3"
        validationBaseDn:
          type: string
          description: LDAP Base DN Query to perform validation.
        validationFilter:
          type: string
          description: LDAP Filter Query to perform validation.
        labels:
          type: array
          description: A collection of labels to tag the LDAP.
          items:
            type: string
            description: A collection of labels to tag the LDAP.
        id:
          type: string
          description: The internal id of the LDAP.
          readOnly: true
        name:
          type: string
          description: The name of the LDAP.
      description: A model to represent a LDAP Configuration.
