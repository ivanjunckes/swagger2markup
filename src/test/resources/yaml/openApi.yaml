openapi: 3.0.1
info:
  title: TAG Resources
  description: TAG Resources
security:
- basic:
  - gateway-admin
tags:
- name: API Connection
  description: This endpoint manages a single api connection configuration.
- name: API Connections
  description: This endpoint manages multiple api connections configuration.
paths:
  /connection/api/{id}:
    get:
      tags:
      - API Connection
      summary: Find an API Connection by id
      operationId: find_4
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        404:
          description: Not Found
    put:
      tags:
      - API Connection
      summary: Updates an API Connection
      description: For the API Pool changes to be visible at Runtime, a flush is required.
      operationId: update
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The API Connection to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiConnection'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        400:
          description: Bad Request
        404:
          description: Not Found
    delete:
      tags:
      - API Connection
      summary: Deletes an API Connection
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        200:
          description: Success
        404:
          description: Not Found
  /connection/api:
    post:
      tags:
      - API Connection
      summary: Creates an API Connection
      operationId: create_5
      requestBody:
        description: The API Connection to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiConnection'
        required: true
      responses:
        201:
          description: Created
          headers:
            Location:
              description: The resource to the created API Connection
              style: simple
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        409:
          description: Conflict
  /connection/api/{id}/flush:
    head:
      tags:
      - API Connection
      summary: Flush the API Connection
      description: Force the API Connection Pool to reload the config and recreate
        its runtime settings.
      operationId: flush
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        204:
          description: Flush Succeeded
        404:
          description: Not Found
  /connection/api/{id}/pool:
    put:
      tags:
      - API Connection
      summary: Updates the API Connection Pool
      description: For the API Connection Pool changes to be visible at runtime, a
        flush is required.
      operationId: updatePool
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The Pool configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        404:
          description: Not Found
  /connection/api/{id}/loadBalancer:
    put:
      tags:
      - API Connection
      summary: Updates the API LoadBalancer configuration for Load Balancing
      operationId: updateLoadBalancer
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The LoadBalancer configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancer'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        404:
          description: Not Found
  /connection/api/{id}/hosts:
    post:
      tags:
      - API Connection
      summary: Add a Host in the API Connection
      operationId: addHost
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The Host to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
        required: true
      responses:
        201:
          description: Created
          headers:
            Location:
              description: The resource to the created Host
              style: simple
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        409:
          description: Conflict
        404:
          description: Not Found
  /connection/api/{id}/hosts/{hostId}:
    put:
      tags:
      - API Connection
      summary: Updates a Host in the API Connection
      operationId: updateHost
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      - name: hostId
        in: path
        description: The id of the Host.
        required: true
        schema:
          type: string
        example: example-com
      requestBody:
        description: The Host to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        400:
          description: Bad Request
        404:
          description: Not Found
    delete:
      tags:
      - API Connection
      summary: Deletes a Host in the API ApiConnection
      operationId: deleteHost
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      - name: hostId
        in: path
        description: The id of the Host.
        required: true
        schema:
          type: string
        example: example-com
      responses:
        200:
          description: Success
        404:
          description: Not Found
  /connection/api/{id}/hosts/health/http:
    put:
      tags:
      - API Connection
      summary: Updates a HttpHealthCheck in the API Connection
      operationId: updateHttpHealthCheck
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The HttpHealthCheck to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpHealthCheck'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        400:
          description: Bad Request
        404:
          description: Not Found
    post:
      tags:
      - API Connection
      summary: Creates a HttpHealthCheck in the API Connection
      operationId: createHttpHealthCheck
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      requestBody:
        description: The HttpHealthCheck to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpHealthCheck'
        required: true
      responses:
        201:
          description: Created
          headers:
            Location:
              description: The resource to the created HttpHealthCheck
              style: simple
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConnection'
        409:
          description: Conflict
        404:
          description: Not Found
    delete:
      tags:
      - API Connection
      summary: Deletes a HttpHealthCheck in the API ApiConnection
      operationId: deleteHttpHealthCheck
      parameters:
      - name: id
        in: path
        description: The id of the API Connection.
        required: true
        schema:
          type: string
        example: my-http-api
      responses:
        200:
          description: Success
        404:
          description: Not Found
components:
  schemas:
    DigestHeader:
      type: object
      properties:
        name:
          type: string
          description: The HTTP header name for the message digest.
        algorithms:
          type: array
          description: Valid hashing algorithms
          items:
            type: string
            description: Valid hashing algorithms
        failOnInvalid:
          type: boolean
          description: 'The request will fail if the digest header fails the validation.
            Failure can happen in the payloads has been temprerd with while in transit.   '
      description: Definition for the header containing a hash calculated to identify
        the payload.
    UpdateBasicAuth:
      required:
      - password
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
      description: Basic Authorization
    CreateOrUpdateHost:
      required:
      - location
      type: object
      properties:
        location:
          type: string
          description: The host location, including the scheme, the host name and
            the port.
          example: https://my.api.com:8090
        active:
          type: boolean
          description: Is the host active in the Load Balacing group.
        weight:
          type: integer
          description: The weight of the host in the Load Balancing group. A zero
            or negative value will effectively skip all traffic to this particular
            host.
          format: int32
      description: A model to represent a Load Balancer Host.
    ApiConnection:
      required:
      - hosts
      - name
      type: object
      properties:
        description:
          type: string
          description: The description of the API.
          example: Tribe API
        headers:
          type: array
          description: A collection of headers to add / set or modify when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/Header'
        pool:
          $ref: '#/components/schemas/Pool'
        loadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        httpHealthCheck:
          $ref: '#/components/schemas/HttpHealthCheck'
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
        id:
          type: string
          description: The internal id of the API.
        name:
          type: string
          description: The name of the API.
          example: Tribe API
        credentials:
          $ref: '#/components/schemas/Credentials'
        hosts:
          type: array
          description: A collection of hosts that compose the Load Balancer.
          items:
            $ref: '#/components/schemas/Host'
      description: A model to represent an API Configuration.
    Pool:
      type: object
      properties:
        connectTimeout:
          type: string
          description: The maximum time a connection can wait when connecting to a
            remote host.
          example: "5"
        requestTimeout:
          type: string
          description: The maximum time a connection waits until the response is completed.
          example: "12"
        readTimeout:
          type: string
          description: The maximum time in millisecond a connection can stay idle.
          example: "5"
        maxConnections:
          type: integer
          description: The maximum number of connections a pool can handle.
          format: int32
          example: 200
        acceptAnyCertificate:
          type: boolean
          description: Accept any certificate from the remote host.
          example: false
        enabledProtocols:
          type: array
          description: A collection of the enabled protocols.
          items:
            type: string
            description: A collection of the enabled protocols.
        enabledCipherSuites:
          type: array
          description: A collection of the enabled ciphers.
          items:
            type: string
            description: A collection of the enabled ciphers.
      description: A model to represent a Pool Configuration.
    DateHeader:
      type: object
      properties:
        name:
          type: string
          description: The HTTP header name for the date.
        failOnMissing:
          type: boolean
          description: Is the date Header mandatory?
        failureResponseStatus:
          type: integer
          description: HTTP response code to return if the header date is invalid
          format: int32
        failureResponseMessage:
          type: string
          description: Message to return if the header date is invalid
      description: Definition for the header containing a date for the message to
        avoid replay.
    CreateSignedBasicAuth:
      required:
      - password
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the Basic authorization configuration when
        used with HTTP Signatures.
    Header:
      required:
      - action
      - name
      - provider
      type: object
      properties:
        name:
          type: string
          description: HTTP header name to add or change.
          example: lb-header
        value:
          type: string
          description: value of the HTTP Header. Depending on the provider, the value
            is required or not.
          example: load-balancer-1
        provider:
          type: string
          description: Provider to be used with the specified value. The providers
            are extensions allowing various manipulations like computing a Digest
            on the fly, or extracting a JWT claim and add it as a header.
          example: DEFAULT
          enum:
          - DEFAULT
          - DIGEST
          - DATE
          - OGNL
          - ENV
        action:
          type: string
          description: action for this header. This basically allows to add, remove
            or append to a header.
          example: SET
          enum:
          - SET
          - UNSET
          - ADD
      description: Header definition when header manipulation is used. For instance
        it can be used when defining an API Connection but it can also be used as
        part of a Route to dynamically add or remove headers.
    UpdateSignedBasicAuth:
      required:
      - password
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the Basic authorization configuration when
        used with HTTP Signatures.
    HttpSignaturesAuth:
      required:
      - algorithm
      - headers
      - keyId
      - requestTarget
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        headers:
          type: array
          description: List of HTTP headers to be signed
          items:
            type: string
            description: List of HTTP headers to be signed
        algorithm:
          type: string
          description: Signature algorithm
        keyId:
          type: string
          description: Signature key ID
        requestTarget:
          type: boolean
          description: Should the pseudo header `(request-target)` be also signed.
            It is composed of the HTTP method and the HTTP path.
      description: HttpSignatures Authorization
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the Bearer Profile.
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        required:
          type: boolean
          description: Even if we don't require a JWT, if one is sent, we will validate
            it if required=true.
        issuer:
          type: string
          description: The identifier of the authority issuing the JWTs used on this
            profile. It needs to match the issuer field inside the JWT. It's usually
            the URL of the JWT issueing server.
        nbfTolerance:
          type: string
          description: Not before time tolerance in milliseconds. It allows for discrepancies
            in server clocks.
        expTolerance:
          type: string
          description: The JWT time to live in milliseconds. It allows for discrepancies
            in server clocks.
        authorizedAlgorithms:
          type: array
          description: The algorithm that can be used to sign the JWT.
          items:
            type: string
            description: The algorithm that can be used to sign the JWT.
        claims:
          $ref: '#/components/schemas/Claims'
        labels:
          type: array
          description: List of associated labels for the bearer profile.
          items:
            type: string
            description: List of associated labels for the bearer profile.
        name:
          type: string
          description: The human readable name of the Bearer Profile.
        secretKeys:
          type: array
          description: Symmetric cryptographic keys used to validate JWTs used in
            this profile. Depends on the authorized algorithms
          items:
            $ref: '#/components/schemas/CreateSecretKey'
        publicKeys:
          type: array
          description: Asymmetric cryptographic keys used to validate JWTs used in
            this profile. Depends on the authorized algorithms
          items:
            $ref: '#/components/schemas/CreatePublicPrivateKey'
      description: 'Creates a bearer profile. For more information, please check:
        https://tribestream.io/guide/en/api-gateway/reference/current/bearer-profile.html'
    UpdateSignedCredentials:
      type: object
      properties:
        oauth2:
          type: array
          description: A collection of OAuth2 Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/UpdateSignedOAuth2Auth'
        httpSignature:
          type: array
          description: A collection of HttpSignatures Authentication configuration
            when proxying incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateHttpSignaturesAuth'
        basic:
          type: array
          description: A collection of Basic Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/UpdateSignedBasicAuth'
      description: UpdateSignedCredentials
    SignatureHeader:
      required:
      - description
      - name
      - required
      type: object
      properties:
        name:
          type: string
          description: The name of the HTTP Header
        description:
          type: string
          description: The markdown description explaining the purpose of the header.
        required:
          type: boolean
          description: If the header is requires. If yes, the authentication will
            fail if that header is missing
      description: Definition of a HTTP Header that will be used in the HTTP Signatures
        authentication process.
    OAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
      description: OAuth Authorization.
    UpdateOAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
      description: OAuth Authorization.
    HttpHealthCheck:
      type: object
      properties:
        active:
          type: boolean
          description: Is the HTTP Health Check active in the Load Balacing group.
          example: true
        interval:
          type: string
          description: The interval to perform a HTTP Health Check.
          example: "10"
        maxInterval:
          type: string
          description: The maximum interval to perform a HTTP Health Check.
          example: "1"
        connectionTimeout:
          type: string
          description: The maximum time a connection can wait when connecting to a
            remote host.
          example: "5"
        backoff:
          type: number
          description: Exponential backoff to multiplicatively decrease the rate of
            retries in case of a failure.
          example: 1.3
        unhealthyAfter:
          type: integer
          description: Number of consecutive failed HTTP Health Check to mark a host
            as unhealthy.
          format: int32
          example: 2
        request:
          $ref: '#/components/schemas/Request'
        response:
          $ref: '#/components/schemas/Response'
      description: A model to represent a HTTP Health Check Configuration.
    Parameter:
      required:
      - name
      - placement
      - provider
      type: object
      properties:
        name:
          type: string
          description: name of the parameter.
        placement:
          type: string
          description: specifies the parameter type so the server can build the HTTP
            request.
          enum:
          - HEADER
          - PATH
          - FORM
          - QUERY
        value:
          type: string
          description: value of the parameter. In some cases it is not required.
        signed:
          type: boolean
          description: when using HTTP Signatures to sign the HTTP request, this parameter
            indicates to the server that the current parameter needs to be signed
            as part of HTTP Signatures.
        provider:
          type: string
          description: provider used for this parameter. The provider gives one access
            to powerful extensions.
      description: Parameters are used to build the HTTP request to test a route.
        It is used in the RouteScenario.
    UpdateApiConnection:
      required:
      - hosts
      type: object
      properties:
        description:
          type: string
          description: The description of the API.
          example: Tribe API
        headers:
          type: array
          description: A collection of headers to add / set or modify when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/Header'
        pool:
          $ref: '#/components/schemas/Pool'
        loadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        httpHealthCheck:
          $ref: '#/components/schemas/HttpHealthCheck'
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
        credentials:
          $ref: '#/components/schemas/UpdateCredentials'
        hosts:
          type: array
          description: A collection of hosts that compose the Load Balancer.
          items:
            $ref: '#/components/schemas/CreateOrUpdateHost'
      description: A model to represent an API Configuration.
    AbstractAuth:
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
      description: AbstractAuth
      anyOf:
      - $ref: '#/components/schemas/CreateBasicAuth'
      - $ref: '#/components/schemas/CreateOAuth2Auth'
      - $ref: '#/components/schemas/CreateHttpSignaturesAuth'
    CreateSignedOAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the OAuth2 authorization configuration when
        used with HTTP Signatures.
    UpdateDatabaseClaimSource:
      required:
      - query
      type: object
      properties:
        description:
          type: string
          description: The markdown description for the claim source.
          example: This claim source is used by the oauth2 profile `my-profile` to
            query external claims to be added to the generated JWT.
        connection:
          type: string
          description: The connection used to connect.
          example: facebook-connection
        labels:
          type: array
          description: The labels associated with the claim source.
          items:
            type: string
            description: The labels associated with the claim source.
        query:
          type: string
          description: The SQL query to perform in order to get the query
          example: SELECT * from claims where user = {username}
      description: Used to update a database Claim Source.
    LoadBalancer:
      required:
      - maxRetries
      - strategy
      type: object
      properties:
        strategy:
          type: string
          description: The Load Balancing LoadBalancer to use.
          example: ROUND_ROBIN
          enum:
          - ROUND_ROBIN
          - LEAST_CONNECTED
          - SINGLE_HOST
        maxRetries:
          type: integer
          description: The max number of retries to execute an incoming proxy request
            before failing it completely.
          format: int32
      description: A model to represent a Load Balancing LoadBalancer.
    Algorithm:
      required:
      - description
      - name
      type: object
      properties:
        name:
          type: string
          description: The portable Signature Algorithm name.
        description:
          type: string
          description: The portable Signature Algorithm description.
      description: A model to represent a list of Algorithms
    CreateHttpSignaturesAuth:
      title: signature
      required:
      - algorithm
      - headers
      - keyId
      - keyValue
      - requestTarget
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        headers:
          type: array
          description: List of HTTP headers to be signed
          items:
            type: string
            description: List of HTTP headers to be signed
        algorithm:
          type: string
          description: Signature algorithm
        keyId:
          type: string
          description: Signature key ID
        keyValue:
          type: string
          description: Signature key value
        requestTarget:
          type: boolean
          description: Should the pseudo header `(request-target)` be also signed.
            It is composed of the HTTP method and the HTTP path.
      description: HttpSignatures Authorization
    CreateOAuth2Auth:
      title: oauth2
      required:
      - endpoint
      - grantType
      type: object
      properties:
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
      description: OAuth Authorization.
    Headers:
      required:
      - headers
      type: object
      properties:
        headers:
          type: array
          description: The list of Headers.
          items:
            $ref: '#/components/schemas/Header'
      description: A model to represent a list of Headers.
    CreateBasicAuth:
      title: basic
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: username as a clear value
        password:
          type: string
          description: password as a clear value
      description: Basic Authorization
    AuthorizationHeader:
      required:
      - name
      - scheme
      type: object
      properties:
        name:
          type: string
          description: HTTP header name
        scheme:
          type: string
          description: HTTP authorization schema.
      description: Represents an HTTP authorization header. It can be used with any
        authorization mechanism.
    Request:
      required:
      - endpoint
      - method
      type: object
      properties:
        method:
          type: string
          description: The HTTP method to use when performing the HTTP Health Check.
          enum:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - HEAD
        endpoint:
          type: string
          description: The endpoint to use when performing the HTTP Health Check.
        headers:
          type: array
          description: A collection of headers to add / set when performing the HTTP
            Health Check.
          items:
            $ref: '#/components/schemas/Header'
      description: The Request configuration to perform a HTTP Health Check.
    Host:
      required:
      - location
      type: object
      properties:
        location:
          type: string
          description: The host location, including the scheme, the host name and
            the port.
          example: https://my.api.com:8090
        active:
          type: boolean
          description: Is the host active in the Load Balacing group.
          example: true
        weight:
          type: integer
          description: The weight of the host in the Load Balancing group. A zero
            or negative value will effectively skip all traffic to this particular
            host.
          format: int32
          example: 1
        health:
          type: integer
          description: A percentage from 0 to 100 with the host availability. The
            value is only available if a TCP or HTTP health check is configured.
          format: int32
        lastSeen:
          type: string
          description: The last seen date of the host. The value is only available
            if a TCP or HTTP health check is configured.
          format: date-time
      description: A model to represent a Load Balancer Host.
    Response:
      type: object
      properties:
        status:
          type: integer
          description: The HTTP status code returned by the HTTP Health Check.
          format: int32
      description: The Response returned by the HTTP Health Check.
    UpdateHttpSignaturesAuth:
      required:
      - algorithm
      - headers
      - keyId
      - keyValue
      - requestTarget
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        headers:
          type: array
          description: List of HTTP headers to be signed
          items:
            type: string
            description: List of HTTP headers to be signed
        algorithm:
          type: string
          description: Signature algorithm
        keyId:
          type: string
          description: Signature key ID
        requestTarget:
          type: boolean
          description: Should the pseudo header `(request-target)` be also signed.
            It is composed of the HTTP method and the HTTP path.
        keyValue:
          type: string
          description: Signature key value
      description: HttpSignatures Authorization
    BasicAuth:
      required:
      - username
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        username:
          type: string
          description: username as a clear value
      description: Basic Authorization
    CreateApiConnection:
      required:
      - hosts
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the API.
          example: Tribe API
        description:
          type: string
          description: The description of the API.
          example: Tribe API
        headers:
          type: array
          description: A collection of headers to add / set or modify when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/Header'
        pool:
          $ref: '#/components/schemas/Pool'
        loadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        httpHealthCheck:
          $ref: '#/components/schemas/HttpHealthCheck'
        credentials:
          $ref: '#/components/schemas/CreateCredentials'
        credentialz:
          type: array
          items:
            $ref: '#/components/schemas/AbstractAuth'
        hosts:
          type: array
          description: A collection of hosts that compose the Load Balancer.
          items:
            $ref: '#/components/schemas/CreateOrUpdateHost'
        labels:
          type: array
          description: A collection of labels to tag the Database.
          items:
            type: string
            description: A collection of labels to tag the Database.
      description: A model to represent an API Configuration.
    UpdateSignedOAuth2Auth:
      required:
      - endpoint
      - grantType
      type: object
      properties:
        authorizationHeader:
          $ref: '#/components/schemas/AuthorizationHeader'
        grantType:
          type: string
          description: OAuth2 grant type to be used to obtain a token.
          enum:
          - PASSWORD
          - CLIENT_CREDENTIALS
          - REFRESH_TOKEN
        username:
          type: string
          description: Username for password grant flow. It is not always mandatory.
        clientId:
          type: string
          description: client ID for password grant flow or client credentials. It
            is not always mandatory.
        endpoint:
          type: string
          description: Endpoint to reach out to in order to request a token.
        password:
          type: string
          description: Password for password grant flow. It is not always mandatory.
        clientSecret:
          type: string
          description: client secret for password grant flow or client credentials.
            It is not always mandatory.
        signed:
          type: boolean
          description: Should the authorization header be signed after being computed.
      description: Specialized version of the OAuth2 authorization configuration when
        used with HTTP Signatures.
    CreateCredentials:
      type: object
      properties:
        oauth2s:
          type: array
          description: A collection of OAuth2 Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateOAuth2Auth'
        httpSignatures:
          type: array
          description: A collection of HttpSignatures Authentication configuration
            when proxying incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateHttpSignaturesAuth'
        basics:
          type: array
          description: A collection of Basic Authentication configuration when proxying
            incoming requests through the API.
          items:
            $ref: '#/components/schemas/CreateBasicAuth'
      description: CreateCredentials
